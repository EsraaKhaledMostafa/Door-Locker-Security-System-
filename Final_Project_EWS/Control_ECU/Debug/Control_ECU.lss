
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002032  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002032  000020c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800076  00800076  000020dc  2**0
                  ALLOC
  3 .stab         00002b5c  00000000  00000000  000020dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007a73  00000000  00000000  00004c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c7eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c95b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000f48f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0001023c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00010629  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010df7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <main>
      8a:	0c 94 17 10 	jmp	0x202e	; 0x202e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 0f 	jmp	0x1ff8	; 0x1ff8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 08 10 	jmp	0x2010	; 0x2010 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA.byte,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA.byte,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB.byte,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB.byte,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC.byte,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC.byte,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD.byte,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD.byte,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
			{
				if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA.byte, pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA.byte, pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTB_ID:
			{
				if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB.byte, pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB.byte, pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTC_ID:
			{
				if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC.byte, pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC.byte, pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTD_ID:
			{
				if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD.byte, pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD.byte, pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
				break;
			}
		}
	}

}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = 0;
     f04:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <GPIO_readPin+0x20>
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	10 f0       	brcs	.+4      	; 0xf16 <GPIO_readPin+0x24>
	{
		pinValue = LOGIC_LOW;
     f12:	19 82       	std	Y+1, r1	; 0x01
     f14:	99 c0       	rjmp	.+306    	; 0x1048 <GPIO_readPin+0x156>
	}
	else
	{
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	b1 f1       	breq	.+108    	; 0xf96 <GPIO_readPin+0xa4>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	71 f0       	breq	.+28     	; 0xf5a <GPIO_readPin+0x68>
     f3e:	84 c0       	rjmp	.+264    	; 0x1048 <GPIO_readPin+0x156>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <GPIO_readPin+0x5a>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <GPIO_readPin+0xe0>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	91 05       	cpc	r25, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <GPIO_readPin+0x66>
     f56:	5b c0       	rjmp	.+182    	; 0x100e <GPIO_readPin+0x11c>
     f58:	77 c0       	rjmp	.+238    	; 0x1048 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			{
				pinValue = GET_BIT(PINA.byte,pin_num);
     f5a:	e9 e3       	ldi	r30, 0x39	; 57
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_readPin+0x82>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	2a 95       	dec	r18
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_readPin+0x7e>
     f78:	9a 01       	movw	r18, r20
     f7a:	28 23       	and	r18, r24
     f7c:	39 23       	and	r19, r25
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_readPin+0x9a>
     f88:	55 95       	asr	r21
     f8a:	47 95       	ror	r20
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_readPin+0x96>
     f90:	ca 01       	movw	r24, r20
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	59 c0       	rjmp	.+178    	; 0x1048 <GPIO_readPin+0x156>
				break;
			}

		case PORTB_ID:
			{
				pinValue = GET_BIT(PINB.byte,pin_num);
     f96:	e6 e3       	ldi	r30, 0x36	; 54
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_readPin+0xbe>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_readPin+0xba>
     fb4:	9a 01       	movw	r18, r20
     fb6:	28 23       	and	r18, r24
     fb8:	39 23       	and	r19, r25
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a9 01       	movw	r20, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_readPin+0xd6>
     fc4:	55 95       	asr	r21
     fc6:	47 95       	ror	r20
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_readPin+0xd2>
     fcc:	ca 01       	movw	r24, r20
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	3b c0       	rjmp	.+118    	; 0x1048 <GPIO_readPin+0x156>
				break;
			}

		case PORTC_ID:
			{
				pinValue = GET_BIT(PINC.byte,pin_num);
     fd2:	e3 e3       	ldi	r30, 0x33	; 51
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_readPin+0xfa>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	2a 95       	dec	r18
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_readPin+0xf6>
     ff0:	9a 01       	movw	r18, r20
     ff2:	28 23       	and	r18, r24
     ff4:	39 23       	and	r19, r25
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_readPin+0x112>
    1000:	55 95       	asr	r21
    1002:	47 95       	ror	r20
    1004:	8a 95       	dec	r24
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_readPin+0x10e>
    1008:	ca 01       	movw	r24, r20
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	1d c0       	rjmp	.+58     	; 0x1048 <GPIO_readPin+0x156>
				break;
			}
		case PORTD_ID:
			{
				pinValue = GET_BIT(PIND.byte,pin_num);
    100e:	e0 e3       	ldi	r30, 0x30	; 48
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_readPin+0x136>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	2a 95       	dec	r18
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_readPin+0x132>
    102c:	9a 01       	movw	r18, r20
    102e:	28 23       	and	r18, r24
    1030:	39 23       	and	r19, r25
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <GPIO_readPin+0x14e>
    103c:	55 95       	asr	r21
    103e:	47 95       	ror	r20
    1040:	8a 95       	dec	r24
    1042:	e2 f7       	brpl	.-8      	; 0x103c <GPIO_readPin+0x14a>
    1044:	ca 01       	movw	r24, r20
    1046:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}
	return pinValue;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <GPIO_setupPortDirection+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <GPIO_setupPortDirection+0x8>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	90 f5       	brcc	.+100    	; 0x10d4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3c 83       	std	Y+4, r19	; 0x04
    1078:	2b 83       	std	Y+3, r18	; 0x03
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	d1 f0       	breq	.+52     	; 0x10b8 <GPIO_setupPortDirection+0x5e>
    1084:	2b 81       	ldd	r18, Y+3	; 0x03
    1086:	3c 81       	ldd	r19, Y+4	; 0x04
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	2c f4       	brge	.+10     	; 0x1098 <GPIO_setupPortDirection+0x3e>
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f0       	breq	.+24     	; 0x10ae <GPIO_setupPortDirection+0x54>
    1096:	1e c0       	rjmp	.+60     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
    1098:	2b 81       	ldd	r18, Y+3	; 0x03
    109a:	3c 81       	ldd	r19, Y+4	; 0x04
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	81 f0       	breq	.+32     	; 0x10c2 <GPIO_setupPortDirection+0x68>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	81 f0       	breq	.+32     	; 0x10cc <GPIO_setupPortDirection+0x72>
    10ac:	13 c0       	rjmp	.+38     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA.byte = direction;
    10ae:	ea e3       	ldi	r30, 0x3A	; 58
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	80 83       	st	Z, r24
    10b6:	0e c0       	rjmp	.+28     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB.byte = direction;
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	80 83       	st	Z, r24
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC.byte = direction;
    10c2:	e4 e3       	ldi	r30, 0x34	; 52
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	80 83       	st	Z, r24
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD.byte = direction;
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <GPIO_writePort+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <GPIO_writePort+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	90 f5       	brcc	.+100    	; 0x115c <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3c 83       	std	Y+4, r19	; 0x04
    1100:	2b 83       	std	Y+3, r18	; 0x03
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	d1 f0       	breq	.+52     	; 0x1140 <GPIO_writePort+0x5e>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	2c f4       	brge	.+10     	; 0x1120 <GPIO_writePort+0x3e>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	61 f0       	breq	.+24     	; 0x1136 <GPIO_writePort+0x54>
    111e:	1e c0       	rjmp	.+60     	; 0x115c <GPIO_writePort+0x7a>
    1120:	2b 81       	ldd	r18, Y+3	; 0x03
    1122:	3c 81       	ldd	r19, Y+4	; 0x04
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	81 f0       	breq	.+32     	; 0x114a <GPIO_writePort+0x68>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	81 f0       	breq	.+32     	; 0x1154 <GPIO_writePort+0x72>
    1134:	13 c0       	rjmp	.+38     	; 0x115c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA.byte = value;
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	0e c0       	rjmp	.+28     	; 0x115c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB.byte = value;
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
    1148:	09 c0       	rjmp	.+18     	; 0x115c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC.byte = value;
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	80 83       	st	Z, r24
    1152:	04 c0       	rjmp	.+8      	; 0x115c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD.byte = value;
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	80 83       	st	Z, r24
			break;
		}

	}

}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <GPIO_readPort+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <GPIO_readPort+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN_regValue = LOGIC_LOW;
    1178:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	90 f5       	brcc	.+100    	; 0x11e4 <GPIO_readPort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3c 83       	std	Y+4, r19	; 0x04
    1188:	2b 83       	std	Y+3, r18	; 0x03
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	91 05       	cpc	r25, r1
    1192:	d1 f0       	breq	.+52     	; 0x11c8 <GPIO_readPort+0x5e>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <GPIO_readPort+0x3e>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 f0       	breq	.+24     	; 0x11be <GPIO_readPort+0x54>
    11a6:	1e c0       	rjmp	.+60     	; 0x11e4 <GPIO_readPort+0x7a>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <GPIO_readPort+0x68>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 05       	cpc	r25, r1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <GPIO_readPort+0x72>
    11bc:	13 c0       	rjmp	.+38     	; 0x11e4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			{
				PIN_regValue = PINA.byte;
    11be:	e9 e3       	ldi	r30, 0x39	; 57
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	0e c0       	rjmp	.+28     	; 0x11e4 <GPIO_readPort+0x7a>
				break;
			}
		case PORTB_ID:
			{
				PIN_regValue = PINB.byte;
    11c8:	e6 e3       	ldi	r30, 0x36	; 54
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <GPIO_readPort+0x7a>
				break;
			}
		case PORTC_ID:
			{
				PIN_regValue = PINC.byte;
    11d2:	e3 e3       	ldi	r30, 0x33	; 51
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <GPIO_readPort+0x7a>
				break;
			}
		case PORTD_ID:
			{
				PIN_regValue = PIND.byte;
    11dc:	e0 e3       	ldi	r30, 0x30	; 48
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}
	return PIN_regValue;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <TWI_init>:
#include "../LIB/atmega32_registers.h"

/*Functions Definitions*/
/*Initialization function of the I2C Driver*/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <TWI_init+0x6>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
	/*Setting the Baud rate by choosing prescaler = 1 and Configuring the TWBR register as wanted*/
	TWBR.byte = Config_Ptr->bit_rate;
    1204:	a0 e2       	ldi	r26, 0x20	; 32
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e9 81       	ldd	r30, Y+1	; 0x01
    120a:	fa 81       	ldd	r31, Y+2	; 0x02
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	8c 93       	st	X, r24
	TWSR.bits.TWPS0 = 0;
    1210:	e1 e2       	ldi	r30, 0x21	; 33
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8e 7f       	andi	r24, 0xFE	; 254
    1218:	80 83       	st	Z, r24
	TWSR.bits.TWPS1 = 0;
    121a:	e1 e2       	ldi	r30, 0x21	; 33
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8d 7f       	andi	r24, 0xFD	; 253
    1222:	80 83       	st	Z, r24

	/*My address*/
	TWAR.byte = Config_Ptr->address;
    1224:	a2 e2       	ldi	r26, 0x22	; 34
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e9 81       	ldd	r30, Y+1	; 0x01
    122a:	fa 81       	ldd	r31, Y+2	; 0x02
    122c:	80 81       	ld	r24, Z
    122e:	8c 93       	st	X, r24

	/*Enable the TWI */
	TWCR.bits.TWEN;
    1230:	e6 e5       	ldi	r30, 0x56	; 86
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
}
    1236:	0f 90       	pop	r0
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <TWI_start>:

/*Function to send the start bit*/
void TWI_start(void)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
	/*Clearing the Flag before sending the start bit, Send teh start bit, Enable teh TWI*/
	/*TWINT -> bit 7, TWSTA -> bit 5, TWEN -> bit 2*/
	TWCR.byte = (1<<7) | (1<<5) | (1<<2);
    124a:	e6 e5       	ldi	r30, 0x56	; 86
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	84 ea       	ldi	r24, 0xA4	; 164
    1250:	80 83       	st	Z, r24

	/*Wait till the Flag is set indicating the start bit is sent successfully*/
	while(TWCR.bits.TWINT == 0);
    1252:	e6 e5       	ldi	r30, 0x56	; 86
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 78       	andi	r24, 0x80	; 128
    125a:	88 23       	and	r24, r24
    125c:	d1 f3       	breq	.-12     	; 0x1252 <TWI_start+0x10>
}
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <TWI_stop>:

/*Function to send the stop bit*/
void TWI_stop(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
	/*Clearing the Flag before sending the stop bit, send the stop and enable the TWI*/
	/*TWINT -> bit 7, TWSTO -> bit 4, TWEN -> bit 2*/
	TWCR.byte = (1<<7) | (1<<4) | (1<<2);
    126c:	e6 e5       	ldi	r30, 0x56	; 86
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	84 e9       	ldi	r24, 0x94	; 148
    1272:	80 83       	st	Z, r24
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <TWI_writeByte>:

/*Function to send a byte*/
void TWI_writeByte(uint8 data)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
	/*Put the data needed to be sent in the TWI Data Register*/
	TWDR.byte = data;
    1286:	e3 e2       	ldi	r30, 0x23	; 35
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	80 83       	st	Z, r24

	/*Clear the flag before sending the data, and enable the TWI*/
	/*TWINT -> bit 7, TWEN -> bit 2*/
	TWCR.byte = (1<<7) | (1<<2);
    128e:	e6 e5       	ldi	r30, 0x56	; 86
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	84 e8       	ldi	r24, 0x84	; 132
    1294:	80 83       	st	Z, r24

	/*Wait till the Flag is set indicating the data is sent successfully*/
	while(TWCR.bits.TWINT == 0);
    1296:	e6 e5       	ldi	r30, 0x56	; 86
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 78       	andi	r24, 0x80	; 128
    129e:	88 23       	and	r24, r24
    12a0:	d1 f3       	breq	.-12     	; 0x1296 <TWI_writeByte+0x1c>
}
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <TWI_readByteWithACK>:


/*Function to receive a byte with sending Acknowledgment to the slave*/
uint8 TWI_readByteWithACK(void)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
	/*Clear the Flag before reading the received byte, enable sending the ACK, and enable the TWI*/
	/*TWINT -> bit 7, TWEA -> bit 6, TWEN -> bit 2*/
	TWCR.byte = (1<<7) | (1<<6)| (1<<2);
    12b2:	e6 e5       	ldi	r30, 0x56	; 86
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	84 ec       	ldi	r24, 0xC4	; 196
    12b8:	80 83       	st	Z, r24

	/*Wait till the Flag is set indicating the data is received successfully*/
	while(TWCR.bits.TWINT == 0);
    12ba:	e6 e5       	ldi	r30, 0x56	; 86
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	80 78       	andi	r24, 0x80	; 128
    12c2:	88 23       	and	r24, r24
    12c4:	d1 f3       	breq	.-12     	; 0x12ba <TWI_readByteWithACK+0x10>

	/*read the received data*/
	return TWDR.byte;
    12c6:	e3 e2       	ldi	r30, 0x23	; 35
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <TWI_readByteWithNACK>:

/*Function to receive a byte with sending Negative Acknowledgment to the slave*/
uint8 TWI_readByteWithNACK(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	/*Clear the Flag before reading the received byte, and enable the TWI*/
	/*TWINT -> bit 7, TWEN -> bit 2*/
	TWCR.byte = (1<<7) | (1<<2);
    12da:	e6 e5       	ldi	r30, 0x56	; 86
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	84 e8       	ldi	r24, 0x84	; 132
    12e0:	80 83       	st	Z, r24

	/*Wait till the Flag is set indicating the data is received successfully*/
	while(TWCR.bits.TWINT == 0);
    12e2:	e6 e5       	ldi	r30, 0x56	; 86
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 78       	andi	r24, 0x80	; 128
    12ea:	88 23       	and	r24, r24
    12ec:	d1 f3       	breq	.-12     	; 0x12e2 <TWI_readByteWithNACK+0x10>

	/*read the received data*/
	return TWDR.byte;
    12ee:	e3 e2       	ldi	r30, 0x23	; 35
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <TWI_getStatus>:

/*Function to get the status of the I2C from TWSR register*/
uint8 TWI_getStatus(void)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	0f 92       	push	r0
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/*From the Data Sheet: The application designer should mask the prescaler bits to zero when checking the Status bits*/
	status = TWSR.byte & 0xF8;
    1304:	e1 e2       	ldi	r30, 0x21	; 33
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	88 7f       	andi	r24, 0xF8	; 248
    130c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <PWM_Timer0_init>:

/*Function Definition*/

/*The function responsible for trigger the Timer0 with the PWM Mode*/
void PWM_Timer0_init(uint8 duty_cycle)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	0f 92       	push	r0
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
	/*Start counting from zero*/
	TCNT0.byte = 0;
    1324:	e2 e5       	ldi	r30, 0x52	; 82
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	10 82       	st	Z, r1

	/*Set up the Compare value based on the required duty cycle*/
	OCR0.byte = ((uint16)(duty_cycle*255)) / 100;
    132a:	ec e5       	ldi	r30, 0x5C	; 92
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	48 2f       	mov	r20, r24
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	ca 01       	movw	r24, r20
    1336:	9c 01       	movw	r18, r24
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	c9 01       	movw	r24, r18
    133e:	96 95       	lsr	r25
    1340:	98 2f       	mov	r25, r24
    1342:	88 27       	eor	r24, r24
    1344:	97 95       	ror	r25
    1346:	87 95       	ror	r24
    1348:	82 1b       	sub	r24, r18
    134a:	93 0b       	sbc	r25, r19
    134c:	84 0f       	add	r24, r20
    134e:	95 1f       	adc	r25, r21
    1350:	24 e6       	ldi	r18, 0x64	; 100
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	b9 01       	movw	r22, r18
    1356:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <__udivmodhi4>
    135a:	cb 01       	movw	r24, r22
    135c:	80 83       	st	Z, r24

	/*Setup the direction of OC0 -> o/p pin*/
	GPIO_setupPinDirection(PWM_OC0_PORT,PWM_OC0_PIN,PIN_OUTPUT);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	63 e0       	ldi	r22, 0x03	; 3
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*Setup Timer0 to work with PWM Non-Inverting Mode*/
	TCCR0.bits.WGM00 = 1;
    1368:	e3 e5       	ldi	r30, 0x53	; 83
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 64       	ori	r24, 0x40	; 64
    1370:	80 83       	st	Z, r24
	TCCR0.bits.WGM01 = 1;
    1372:	e3 e5       	ldi	r30, 0x53	; 83
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	88 60       	ori	r24, 0x08	; 8
    137a:	80 83       	st	Z, r24

	TCCR0.bits.COM01 = 1;
    137c:	e3 e5       	ldi	r30, 0x53	; 83
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 62       	ori	r24, 0x20	; 32
    1384:	80 83       	st	Z, r24

	/*Set the clock source with prescaler N = 8 */
	TCCR0.bits.CS01 = 1;
    1386:	e3 e5       	ldi	r30, 0x53	; 83
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	82 60       	ori	r24, 0x02	; 2
    138e:	80 83       	st	Z, r24
}
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <__vector_9>:



/*Interrupt Service Routines*/
ISR (TIMER1_OVF_vect)
{
    1398:	1f 92       	push	r1
    139a:	0f 92       	push	r0
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	0f 92       	push	r0
    13a0:	11 24       	eor	r1, r1
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	/*Call the Callback function*/
	if(g_callback_ptr != NULL_PTR)
    13c2:	80 91 76 00 	lds	r24, 0x0076
    13c6:	90 91 77 00 	lds	r25, 0x0077
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	29 f0       	breq	.+10     	; 0x13d8 <__vector_9+0x40>
	{
		(*g_callback_ptr)();
    13ce:	e0 91 76 00 	lds	r30, 0x0076
    13d2:	f0 91 77 00 	lds	r31, 0x0077
    13d6:	09 95       	icall
	}
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	0f 90       	pop	r0
    13fa:	1f 90       	pop	r1
    13fc:	18 95       	reti

000013fe <__vector_7>:

ISR (TIMER1_COMPA_vect)
{
    13fe:	1f 92       	push	r1
    1400:	0f 92       	push	r0
    1402:	0f b6       	in	r0, 0x3f	; 63
    1404:	0f 92       	push	r0
    1406:	11 24       	eor	r1, r1
    1408:	2f 93       	push	r18
    140a:	3f 93       	push	r19
    140c:	4f 93       	push	r20
    140e:	5f 93       	push	r21
    1410:	6f 93       	push	r22
    1412:	7f 93       	push	r23
    1414:	8f 93       	push	r24
    1416:	9f 93       	push	r25
    1418:	af 93       	push	r26
    141a:	bf 93       	push	r27
    141c:	ef 93       	push	r30
    141e:	ff 93       	push	r31
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
	/*Call the Callback function*/
	if(g_callback_ptr != NULL_PTR)
    1428:	80 91 76 00 	lds	r24, 0x0076
    142c:	90 91 77 00 	lds	r25, 0x0077
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	29 f0       	breq	.+10     	; 0x143e <__vector_7+0x40>
		{
			(*g_callback_ptr)();
    1434:	e0 91 76 00 	lds	r30, 0x0076
    1438:	f0 91 77 00 	lds	r31, 0x0077
    143c:	09 95       	icall
		}
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	ff 91       	pop	r31
    1444:	ef 91       	pop	r30
    1446:	bf 91       	pop	r27
    1448:	af 91       	pop	r26
    144a:	9f 91       	pop	r25
    144c:	8f 91       	pop	r24
    144e:	7f 91       	pop	r23
    1450:	6f 91       	pop	r22
    1452:	5f 91       	pop	r21
    1454:	4f 91       	pop	r20
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti

00001464 <Timer1_init>:

/*Functions Definitions*/

/*Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <Timer1_init+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <Timer1_init+0x8>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
	/*Set Timer1 Initial value to the required one from the configuration structure*/
	TCNT1 = Config_Ptr->initial_value;
    1474:	ac e4       	ldi	r26, 0x4C	; 76
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	9c 93       	st	X, r25
    1484:	8e 93       	st	-X, r24

	/*Choose the mode of timer either Compare Mode or Normal Mode*/
	switch(Config_Ptr->mode)
    1486:	e9 81       	ldd	r30, Y+1	; 0x01
    1488:	fa 81       	ldd	r31, Y+2	; 0x02
    148a:	85 81       	ldd	r24, Z+5	; 0x05
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3c 83       	std	Y+4, r19	; 0x04
    1492:	2b 83       	std	Y+3, r18	; 0x03
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	31 f0       	breq	.+12     	; 0x14a8 <Timer1_init+0x44>
    149c:	2b 81       	ldd	r18, Y+3	; 0x03
    149e:	3c 81       	ldd	r19, Y+4	; 0x04
    14a0:	24 30       	cpi	r18, 0x04	; 4
    14a2:	31 05       	cpc	r19, r1
    14a4:	c9 f0       	breq	.+50     	; 0x14d8 <Timer1_init+0x74>
    14a6:	3f c0       	rjmp	.+126    	; 0x1526 <Timer1_init+0xc2>
	{
		case(NORMAL_MODE):
		{
			/*Enabling the Overflow(Normal) Mode Interrupt*/
			TIMSK |= (1<<TOIE1);
    14a8:	a9 e5       	ldi	r26, 0x59	; 89
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e9 e5       	ldi	r30, 0x59	; 89
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	84 60       	ori	r24, 0x04	; 4
    14b4:	8c 93       	st	X, r24

			/*Normal Mode -> WGM010 & WGM11 in TCCR1A = 0, and WGM13 & WGM12 in TCCR1B = 0*/
			TCCR1A = (1<<FOC1A); /*For Choosing non PWM Mode*/
    14b6:	ef e4       	ldi	r30, 0x4F	; 79
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	88 e0       	ldi	r24, 0x08	; 8
    14bc:	80 83       	st	Z, r24

			/*Choosing the prescaler value for activating the CLK*/
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    14be:	ae e4       	ldi	r26, 0x4E	; 78
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ee e4       	ldi	r30, 0x4E	; 78
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	98 2f       	mov	r25, r24
    14ca:	98 7f       	andi	r25, 0xF8	; 248
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	84 81       	ldd	r24, Z+4	; 0x04
    14d2:	89 2b       	or	r24, r25
    14d4:	8c 93       	st	X, r24
    14d6:	27 c0       	rjmp	.+78     	; 0x1526 <Timer1_init+0xc2>
			break;
		}
		case (COMPARE_A_MODE):
		{
			/*Put the compare value in the Compare register*/
			OCR1A = Config_Ptr->compare_value;
    14d8:	aa e4       	ldi	r26, 0x4A	; 74
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	9c 93       	st	X, r25
    14e8:	8e 93       	st	-X, r24

			/*Enabling the Compare Mode Interrupt*/
			TIMSK |= (1<<OCIE1A);
    14ea:	a9 e5       	ldi	r26, 0x59	; 89
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e9 e5       	ldi	r30, 0x59	; 89
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 61       	ori	r24, 0x10	; 16
    14f6:	8c 93       	st	X, r24

			/*Compare Mode -> WGM10 & WGM11 in TCCR1A = 0, and WGM13 = 0 & WGM12 = 1 in TCCR1B*/
			TCCR1A = (1<<FOC1A); /*For Choosing non PWM Mode*/
    14f8:	ef e4       	ldi	r30, 0x4F	; 79
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	88 e0       	ldi	r24, 0x08	; 8
    14fe:	80 83       	st	Z, r24


			/*Choosing the prescaler value for activating the CLK*/
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1500:	ae e4       	ldi	r26, 0x4E	; 78
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ee e4       	ldi	r30, 0x4E	; 78
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	98 2f       	mov	r25, r24
    150c:	98 7f       	andi	r25, 0xF8	; 248
    150e:	e9 81       	ldd	r30, Y+1	; 0x01
    1510:	fa 81       	ldd	r31, Y+2	; 0x02
    1512:	84 81       	ldd	r24, Z+4	; 0x04
    1514:	89 2b       	or	r24, r25
    1516:	8c 93       	st	X, r24
			TCCR1B |= (1<<WGM12);
    1518:	ae e4       	ldi	r26, 0x4E	; 78
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ee e4       	ldi	r30, 0x4E	; 78
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	88 60       	ori	r24, 0x08	; 8
    1524:	8c 93       	st	X, r24
			break;
		}
	}
}
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <Timer1_deInit>:

/*Function to disable the Timer1*/
void Timer1_deInit(void)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0; /*Reset the initial value of timer*/
    153c:	ec e4       	ldi	r30, 0x4C	; 76
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	11 82       	std	Z+1, r1	; 0x01
    1542:	10 82       	st	Z, r1
	TCCR1B = 0; /*Deactivate the clock*/
    1544:	ee e4       	ldi	r30, 0x4E	; 78
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	10 82       	st	Z, r1
}
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	08 95       	ret

00001550 <Timer1_setCallBack>:

/*Function to set the Call Back function address*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1550:	df 93       	push	r29
    1552:	cf 93       	push	r28
    1554:	00 d0       	rcall	.+0      	; 0x1556 <Timer1_setCallBack+0x6>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
	g_callback_ptr = a_ptr; /*Store the Callback Function Address in a global variable so as not to be poped from stack on leaving this function*/
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	90 93 77 00 	sts	0x0077, r25
    1566:	80 93 76 00 	sts	0x0076, r24
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <UART_init>:

/*Functions Definitions*/

/*Initialization function of the UART Driver*/
void UART_init(UART_ConfigType* Config_Ptr)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <UART_init+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <UART_init+0x8>
    157c:	00 d0       	rcall	.+0      	; 0x157e <UART_init+0xa>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
	/*value to be written in UBRR Register according to baud rate*/
	uint16 ubrr_value = 0;
    1586:	1a 82       	std	Y+2, r1	; 0x02
    1588:	19 82       	std	Y+1, r1	; 0x01

	UCSRA.bits.U2X = 1; /*Asynchronous with double the UART transmission speed*/
    158a:	eb e2       	ldi	r30, 0x2B	; 43
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	82 60       	ori	r24, 0x02	; 2
    1592:	80 83       	st	Z, r24
	UCSRB.bits.TXEN = 1; /*Tx enable*/
    1594:	ea e2       	ldi	r30, 0x2A	; 42
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	88 60       	ori	r24, 0x08	; 8
    159c:	80 83       	st	Z, r24
	UCSRB.bits.RXEN = 1; /*Rx enable*/
    159e:	ea e2       	ldi	r30, 0x2A	; 42
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 61       	ori	r24, 0x10	; 16
    15a6:	80 83       	st	Z, r24

	/*URSEL should  = 1 to access UCSRC*/
	UCSRC.bits.URSEL = 1;
    15a8:	e0 e4       	ldi	r30, 0x40	; 64
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	80 68       	ori	r24, 0x80	; 128
    15b0:	80 83       	st	Z, r24
	/*Choose the Parity --> UPM0 & UPM1*/
	UCSRC.byte = (UCSRC.byte & 0xCF) | (Config_Ptr->parity << 4);
    15b2:	a0 e4       	ldi	r26, 0x40	; 64
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e0 e4       	ldi	r30, 0x40	; 64
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	28 2f       	mov	r18, r24
    15be:	2f 7c       	andi	r18, 0xCF	; 207
    15c0:	eb 81       	ldd	r30, Y+3	; 0x03
    15c2:	fc 81       	ldd	r31, Y+4	; 0x04
    15c4:	85 81       	ldd	r24, Z+5	; 0x05
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	82 95       	swap	r24
    15cc:	92 95       	swap	r25
    15ce:	90 7f       	andi	r25, 0xF0	; 240
    15d0:	98 27       	eor	r25, r24
    15d2:	80 7f       	andi	r24, 0xF0	; 240
    15d4:	98 27       	eor	r25, r24
    15d6:	82 2b       	or	r24, r18
    15d8:	8c 93       	st	X, r24

	/*Choose the Stop Bits*/
	UCSRC.bits.USBS = Config_Ptr->stop;
    15da:	a0 e4       	ldi	r26, 0x40	; 64
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	eb 81       	ldd	r30, Y+3	; 0x03
    15e0:	fc 81       	ldd	r31, Y+4	; 0x04
    15e2:	86 81       	ldd	r24, Z+6	; 0x06
    15e4:	81 70       	andi	r24, 0x01	; 1
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	98 2f       	mov	r25, r24
    15ea:	99 0f       	add	r25, r25
    15ec:	99 0f       	add	r25, r25
    15ee:	99 0f       	add	r25, r25
    15f0:	8c 91       	ld	r24, X
    15f2:	87 7f       	andi	r24, 0xF7	; 247
    15f4:	89 2b       	or	r24, r25
    15f6:	8c 93       	st	X, r24

	/*Choose the data length*/
	switch(Config_Ptr->data)
    15f8:	eb 81       	ldd	r30, Y+3	; 0x03
    15fa:	fc 81       	ldd	r31, Y+4	; 0x04
    15fc:	84 81       	ldd	r24, Z+4	; 0x04
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3e 83       	std	Y+6, r19	; 0x06
    1604:	2d 83       	std	Y+5, r18	; 0x05
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	91 05       	cpc	r25, r1
    160e:	d9 f1       	breq	.+118    	; 0x1686 <UART_init+0x112>
    1610:	2d 81       	ldd	r18, Y+5	; 0x05
    1612:	3e 81       	ldd	r19, Y+6	; 0x06
    1614:	23 30       	cpi	r18, 0x03	; 3
    1616:	31 05       	cpc	r19, r1
    1618:	54 f4       	brge	.+20     	; 0x162e <UART_init+0xba>
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	91 f0       	breq	.+36     	; 0x1646 <UART_init+0xd2>
    1622:	2d 81       	ldd	r18, Y+5	; 0x05
    1624:	3e 81       	ldd	r19, Y+6	; 0x06
    1626:	21 30       	cpi	r18, 0x01	; 1
    1628:	31 05       	cpc	r19, r1
    162a:	e9 f0       	breq	.+58     	; 0x1666 <UART_init+0xf2>
    162c:	5b c0       	rjmp	.+182    	; 0x16e4 <UART_init+0x170>
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	b9 f1       	breq	.+110    	; 0x16a6 <UART_init+0x132>
    1638:	2d 81       	ldd	r18, Y+5	; 0x05
    163a:	3e 81       	ldd	r19, Y+6	; 0x06
    163c:	24 30       	cpi	r18, 0x04	; 4
    163e:	31 05       	cpc	r19, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <UART_init+0xd0>
    1642:	41 c0       	rjmp	.+130    	; 0x16c6 <UART_init+0x152>
    1644:	4f c0       	rjmp	.+158    	; 0x16e4 <UART_init+0x170>
	{
		case (FIVE_BITS):
			UCSRC.bits.UCSZ0 = 0;
    1646:	e0 e4       	ldi	r30, 0x40	; 64
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8d 7f       	andi	r24, 0xFD	; 253
    164e:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 0;
    1650:	e0 e4       	ldi	r30, 0x40	; 64
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8b 7f       	andi	r24, 0xFB	; 251
    1658:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    165a:	ea e2       	ldi	r30, 0x2A	; 42
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8b 7f       	andi	r24, 0xFB	; 251
    1662:	80 83       	st	Z, r24
    1664:	3f c0       	rjmp	.+126    	; 0x16e4 <UART_init+0x170>
			break;
		case (SIX_BITS):
			UCSRC.bits.UCSZ0 = 1;
    1666:	e0 e4       	ldi	r30, 0x40	; 64
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	82 60       	ori	r24, 0x02	; 2
    166e:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 0;
    1670:	e0 e4       	ldi	r30, 0x40	; 64
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8b 7f       	andi	r24, 0xFB	; 251
    1678:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    167a:	ea e2       	ldi	r30, 0x2A	; 42
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8b 7f       	andi	r24, 0xFB	; 251
    1682:	80 83       	st	Z, r24
    1684:	2f c0       	rjmp	.+94     	; 0x16e4 <UART_init+0x170>
			break;
		case (SEVEN_BITS):
			UCSRC.bits.UCSZ0 = 0;
    1686:	e0 e4       	ldi	r30, 0x40	; 64
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8d 7f       	andi	r24, 0xFD	; 253
    168e:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 1;
    1690:	e0 e4       	ldi	r30, 0x40	; 64
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	84 60       	ori	r24, 0x04	; 4
    1698:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    169a:	ea e2       	ldi	r30, 0x2A	; 42
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8b 7f       	andi	r24, 0xFB	; 251
    16a2:	80 83       	st	Z, r24
    16a4:	1f c0       	rjmp	.+62     	; 0x16e4 <UART_init+0x170>
			break;
		case (EIGHT_BITS):
			UCSRC.bits.UCSZ0 = 1;
    16a6:	e0 e4       	ldi	r30, 0x40	; 64
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 1;
    16b0:	e0 e4       	ldi	r30, 0x40	; 64
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	84 60       	ori	r24, 0x04	; 4
    16b8:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    16ba:	ea e2       	ldi	r30, 0x2A	; 42
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	8b 7f       	andi	r24, 0xFB	; 251
    16c2:	80 83       	st	Z, r24
    16c4:	0f c0       	rjmp	.+30     	; 0x16e4 <UART_init+0x170>
			break;
		case (NINE_BITS):
			UCSRC.bits.UCSZ0 = 1;
    16c6:	e0 e4       	ldi	r30, 0x40	; 64
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	82 60       	ori	r24, 0x02	; 2
    16ce:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 1;
    16d0:	e0 e4       	ldi	r30, 0x40	; 64
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	84 60       	ori	r24, 0x04	; 4
    16d8:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 1;
    16da:	ea e2       	ldi	r30, 0x2A	; 42
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	84 60       	ori	r24, 0x04	; 4
    16e2:	80 83       	st	Z, r24
			break;
	}

	/*Calculate the value to be written in UBRR Register according to baud rate*/
	ubrr_value = (uint16)(((F_CPU/(8UL * Config_Ptr->baudrate))) - 1);
    16e4:	eb 81       	ldd	r30, Y+3	; 0x03
    16e6:	fc 81       	ldd	r31, Y+4	; 0x04
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	a2 81       	ldd	r26, Z+2	; 0x02
    16ee:	b3 81       	ldd	r27, Z+3	; 0x03
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	aa 1f       	adc	r26, r26
    16f6:	bb 1f       	adc	r27, r27
    16f8:	88 0f       	add	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	aa 1f       	adc	r26, r26
    16fe:	bb 1f       	adc	r27, r27
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	aa 1f       	adc	r26, r26
    1706:	bb 1f       	adc	r27, r27
    1708:	9c 01       	movw	r18, r24
    170a:	ad 01       	movw	r20, r26
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	92 e1       	ldi	r25, 0x12	; 18
    1710:	aa e7       	ldi	r26, 0x7A	; 122
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <__udivmodsi4>
    171c:	da 01       	movw	r26, r20
    171e:	c9 01       	movw	r24, r18
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL should = 0 to access UBRRH*/
	UBRRH.byte = (ubrr_value>>8);
    1726:	e0 e4       	ldi	r30, 0x40	; 64
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	89 2f       	mov	r24, r25
    1730:	99 27       	eor	r25, r25
    1732:	80 83       	st	Z, r24
	UBRRL.byte = ubrr_value;
    1734:	e9 e2       	ldi	r30, 0x29	; 41
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	80 83       	st	Z, r24

}
    173c:	26 96       	adiw	r28, 0x06	; 6
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <UART_sendByte>:

/*Function responsible for send byte to another UART device.*/
void UART_sendByte(const uint8 data)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
	/*wait for the UDRE Flag to be set indicating that the UDR register is empty and previous data was transmitted to avoid overwriting*/
	while(UCSRA.bits.UDRE == 0);
    175a:	eb e2       	ldi	r30, 0x2B	; 43
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	80 72       	andi	r24, 0x20	; 32
    1762:	88 23       	and	r24, r24
    1764:	d1 f3       	breq	.-12     	; 0x175a <UART_sendByte+0xc>

	/*Put the required data to be sent in the UDR Regsiter*/
	UDR.byte = data;
    1766:	ec e2       	ldi	r30, 0x2C	; 44
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	80 83       	st	Z, r24
}
    176e:	0f 90       	pop	r0
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <UART_receiveByte>:

/*Functional responsible for receive byte from another UART device.*/
uint8 UART_receiveByte(void)
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
	/*wait for the RXC Flag to be set indicating that the UART finished receiving the data*/
	while(UCSRA.bits.RXC == 0);
    177e:	eb e2       	ldi	r30, 0x2B	; 43
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	80 78       	andi	r24, 0x80	; 128
    1786:	88 23       	and	r24, r24
    1788:	d1 f3       	breq	.-12     	; 0x177e <UART_receiveByte+0x8>

	/*read the data received from the UDR Register*/
	return UDR.byte;
    178a:	ec e2       	ldi	r30, 0x2C	; 44
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
}
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <UART_sendString>:

/*Send the required string through UART to the other UART device.*/
void UART_sendString(const uint8* str)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <UART_sendString+0x6>
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	0a c0       	rjmp	.+20     	; 0x17ba <UART_sendString+0x24>
	/*Send the whole string byte by byte*/
	while(*str != '\0')
	{
		UART_sendByte(*str);
    17a6:	e9 81       	ldd	r30, Y+1	; 0x01
    17a8:	fa 81       	ldd	r31, Y+2	; 0x02
    17aa:	80 81       	ld	r24, Z
    17ac:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
		str++;
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01

/*Send the required string through UART to the other UART device.*/
void UART_sendString(const uint8* str)
{
	/*Send the whole string byte by byte*/
	while(*str != '\0')
    17ba:	e9 81       	ldd	r30, Y+1	; 0x01
    17bc:	fa 81       	ldd	r31, Y+2	; 0x02
    17be:	80 81       	ld	r24, Z
    17c0:	88 23       	and	r24, r24
    17c2:	89 f7       	brne	.-30     	; 0x17a6 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <UART_receiveString>:

/*Receive the required string until the '#' symbol through UART from the other UART device.*/
void UART_receiveString(uint8* str)
{
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <UART_receiveString+0xa>
    17d8:	0f 92       	push	r0
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9b 83       	std	Y+3, r25	; 0x03
    17e0:	8a 83       	std	Y+2, r24	; 0x02
	/*counter*/
	uint8 i = 0;
    17e2:	19 82       	std	Y+1, r1	; 0x01

	/*Receive first byte*/
	str[i] = UART_receiveByte();
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	9b 81       	ldd	r25, Y+3	; 0x03
    17ee:	8c 01       	movw	r16, r24
    17f0:	02 0f       	add	r16, r18
    17f2:	13 1f       	adc	r17, r19
    17f4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <UART_receiveByte>
    17f8:	f8 01       	movw	r30, r16
    17fa:	80 83       	st	Z, r24
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <UART_receiveString+0x4e>

	while(str[i] != '#') /*# is the key for sending and receiving*/
	{
		/*receive new byte from the string in the next free location*/
		i++;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	9b 81       	ldd	r25, Y+3	; 0x03
    180e:	8c 01       	movw	r16, r24
    1810:	02 0f       	add	r16, r18
    1812:	13 1f       	adc	r17, r19
    1814:	0e 94 bb 0b 	call	0x1776	; 0x1776 <UART_receiveByte>
    1818:	f8 01       	movw	r30, r16
    181a:	80 83       	st	Z, r24
	uint8 i = 0;

	/*Receive first byte*/
	str[i] = UART_receiveByte();

	while(str[i] != '#') /*# is the key for sending and receiving*/
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	fc 01       	movw	r30, r24
    1828:	e2 0f       	add	r30, r18
    182a:	f3 1f       	adc	r31, r19
    182c:	80 81       	ld	r24, Z
    182e:	83 32       	cpi	r24, 0x23	; 35
    1830:	31 f7       	brne	.-52     	; 0x17fe <UART_receiveString+0x30>
		/*receive new byte from the string in the next free location*/
		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0'; /*put the null terminator for the string*/
    1832:	89 81       	ldd	r24, Y+1	; 0x01
    1834:	28 2f       	mov	r18, r24
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	9b 81       	ldd	r25, Y+3	; 0x03
    183c:	fc 01       	movw	r30, r24
    183e:	e2 0f       	add	r30, r18
    1840:	f3 1f       	adc	r31, r19
    1842:	10 82       	st	Z, r1
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	08 95       	ret

00001854 <Buzzer_init>:
#include "../MCAL/gpio.h"

/*Functions Definitions*/
/*Initialization Function of the Buzzer*/
void Buzzer_init()
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
	/*Setup Buzzer Pin as o/p pin*/
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    185c:	83 e0       	ldi	r24, 0x03	; 3
    185e:	67 e0       	ldi	r22, 0x07	; 7
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	/*turn off the buzzer at the beginning*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1866:	83 e0       	ldi	r24, 0x03	; 3
    1868:	67 e0       	ldi	r22, 0x07	; 7
    186a:	40 e0       	ldi	r20, 0x00	; 0
    186c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <Buzzer_on>:

/*Function to enable the Buzzer through the GPIO*/
void Buzzer_on(void)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    187e:	83 e0       	ldi	r24, 0x03	; 3
    1880:	67 e0       	ldi	r22, 0x07	; 7
    1882:	41 e0       	ldi	r20, 0x01	; 1
    1884:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <Buzzer_off>:

/*Function to disable the Buzzer through the GPIO*/
void Buzzer_off(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	67 e0       	ldi	r22, 0x07	; 7
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <DcMotor_Init>:

/*Functions Definitions*/

/*Initialization of the DC Motor*/
void DcMotor_Init(void)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,PIN_OUTPUT);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	60 e0       	ldi	r22, 0x00	; 0
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,PIN_OUTPUT);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	61 e0       	ldi	r22, 0x01	; 1
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <DcMotor_Rotate>:



/*Setup the direction of rotation of the motor*/
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <DcMotor_Rotate+0x6>
    18e2:	00 d0       	rcall	.+0      	; 0x18e4 <DcMotor_Rotate+0x8>
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(state)
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	3c 83       	std	Y+4, r19	; 0x04
    18f4:	2b 83       	std	Y+3, r18	; 0x03
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	91 05       	cpc	r25, r1
    18fe:	a1 f0       	breq	.+40     	; 0x1928 <DcMotor_Rotate+0x4c>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	d1 f0       	breq	.+52     	; 0x193e <DcMotor_Rotate+0x62>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	01 f5       	brne	.+64     	; 0x1952 <DcMotor_Rotate+0x76>
	{
		case STOP:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	61 e0       	ldi	r22, 0x01	; 1
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1926:	15 c0       	rjmp	.+42     	; 0x1952 <DcMotor_Rotate+0x76>
			break;
		case CW:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_LOW);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_HIGH);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	61 e0       	ldi	r22, 0x01	; 1
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    193c:	0a c0       	rjmp	.+20     	; 0x1952 <DcMotor_Rotate+0x76>
			break;
		case ACW:
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN1_PORT,DC_MOTOR_H_BRIDGE_IN1_PIN,LOGIC_HIGH);
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	41 e0       	ldi	r20, 0x01	; 1
    1944:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_H_BRIDGE_IN2_PORT,DC_MOTOR_H_BRIDGE_IN2_PIN,LOGIC_LOW);
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	40 e0       	ldi	r20, 0x00	; 0
    194e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			break;
	}
	PWM_Timer0_init(speed);
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	0e 94 8c 09 	call	0x1318	; 0x1318 <PWM_Timer0_init>
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <EEPROM_writeByte>:
#include "../MCAL/i2c.h"

/*Functions Definitions*/
/*Function to store a byte in the memory*/
uint8 EEPROM_writeByte(uint16 memory_address, uint8 data)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <EEPROM_writeByte+0x6>
    196c:	00 d0       	rcall	.+0      	; 0x196e <EEPROM_writeByte+0x8>
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9a 83       	std	Y+2, r25	; 0x02
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	6b 83       	std	Y+3, r22	; 0x03
	/*Send the start byte*/
	TWI_start();
    1978:	0e 94 21 09 	call	0x1242	; 0x1242 <TWI_start>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_START)
    197c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1980:	88 30       	cpi	r24, 0x08	; 8
    1982:	11 f0       	breq	.+4      	; 0x1988 <EEPROM_writeByte+0x22>
		return ERROR;
    1984:	1c 82       	std	Y+4, r1	; 0x04
    1986:	28 c0       	rjmp	.+80     	; 0x19d8 <EEPROM_writeByte+0x72>

	/*send the device address starting with constant ob1010 and then A8, A9, A10 from the memory address as they are part of the device address and finally followed by the R/W bit*/
	/*R/W -> 0 since we need to write a byte in memory*/
	TWI_writeByte((uint8)(0xA0 | ((memory_address & 0x0700)>>7)));
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	80 70       	andi	r24, 0x00	; 0
    198e:	97 70       	andi	r25, 0x07	; 7
    1990:	88 0f       	add	r24, r24
    1992:	89 2f       	mov	r24, r25
    1994:	88 1f       	adc	r24, r24
    1996:	99 0b       	sbc	r25, r25
    1998:	91 95       	neg	r25
    199a:	80 6a       	ori	r24, 0xA0	; 160
    199c:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_writeByte>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    19a0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    19a4:	88 31       	cpi	r24, 0x18	; 24
    19a6:	11 f0       	breq	.+4      	; 0x19ac <EEPROM_writeByte+0x46>
		return ERROR;
    19a8:	1c 82       	std	Y+4, r1	; 0x04
    19aa:	16 c0       	rjmp	.+44     	; 0x19d8 <EEPROM_writeByte+0x72>

	/*Send the required memory location address*/
	TWI_writeByte((uint8)memory_address);
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_writeByte>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    19b2:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    19b6:	88 32       	cpi	r24, 0x28	; 40
    19b8:	11 f0       	breq	.+4      	; 0x19be <EEPROM_writeByte+0x58>
		return ERROR;
    19ba:	1c 82       	std	Y+4, r1	; 0x04
    19bc:	0d c0       	rjmp	.+26     	; 0x19d8 <EEPROM_writeByte+0x72>

	/*write the data to the EEPROM*/
	TWI_writeByte(data);
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_writeByte>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    19c4:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    19c8:	88 32       	cpi	r24, 0x28	; 40
    19ca:	11 f0       	breq	.+4      	; 0x19d0 <EEPROM_writeByte+0x6a>
		return ERROR;
    19cc:	1c 82       	std	Y+4, r1	; 0x04
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <EEPROM_writeByte+0x72>

	/*Send the Stop bit*/
	TWI_stop();
    19d0:	0e 94 32 09 	call	0x1264	; 0x1264 <TWI_stop>

	return SUCCESS;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	8c 83       	std	Y+4, r24	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <EEPROM_readByte>:

/*Function to read a byte from the memory*/
uint8 EEPROM_readByte(uint16 memory_address, uint8* data)
{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <EEPROM_readByte+0x6>
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <EEPROM_readByte+0x8>
    19f0:	0f 92       	push	r0
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	9a 83       	std	Y+2, r25	; 0x02
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	7c 83       	std	Y+4, r23	; 0x04
    19fc:	6b 83       	std	Y+3, r22	; 0x03
	/*Send the start byte*/
	TWI_start();
    19fe:	0e 94 21 09 	call	0x1242	; 0x1242 <TWI_start>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_START)
    1a02:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1a06:	88 30       	cpi	r24, 0x08	; 8
    1a08:	11 f0       	breq	.+4      	; 0x1a0e <EEPROM_readByte+0x26>
		return ERROR;
    1a0a:	1d 82       	std	Y+5, r1	; 0x05
    1a0c:	44 c0       	rjmp	.+136    	; 0x1a96 <EEPROM_readByte+0xae>

	/*send the device address starting with constant ob1010 and then A8, A9, A10 from the memory address as they are part of the device address and finally followed by the R/W bit*/
	/*R/W -> 0 since we need to write a byte in memory*/
	TWI_writeByte((uint8)(0xA0 | ((memory_address & 0x0700)>>7)));
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	9a 81       	ldd	r25, Y+2	; 0x02
    1a12:	80 70       	andi	r24, 0x00	; 0
    1a14:	97 70       	andi	r25, 0x07	; 7
    1a16:	88 0f       	add	r24, r24
    1a18:	89 2f       	mov	r24, r25
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	99 0b       	sbc	r25, r25
    1a1e:	91 95       	neg	r25
    1a20:	80 6a       	ori	r24, 0xA0	; 160
    1a22:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_writeByte>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1a26:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1a2a:	88 31       	cpi	r24, 0x18	; 24
    1a2c:	11 f0       	breq	.+4      	; 0x1a32 <EEPROM_readByte+0x4a>
		return ERROR;
    1a2e:	1d 82       	std	Y+5, r1	; 0x05
    1a30:	32 c0       	rjmp	.+100    	; 0x1a96 <EEPROM_readByte+0xae>

	/*Send the required memory location address*/
	TWI_writeByte((uint8)memory_address);
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_writeByte>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
    1a38:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1a3c:	88 32       	cpi	r24, 0x28	; 40
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <EEPROM_readByte+0x5c>
		return ERROR;
    1a40:	1d 82       	std	Y+5, r1	; 0x05
    1a42:	29 c0       	rjmp	.+82     	; 0x1a96 <EEPROM_readByte+0xae>

	/*Send the repeated start bit to start the reading frame*/
	TWI_start();
    1a44:	0e 94 21 09 	call	0x1242	; 0x1242 <TWI_start>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_REPEATED_START)
    1a48:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1a4c:	80 31       	cpi	r24, 0x10	; 16
    1a4e:	11 f0       	breq	.+4      	; 0x1a54 <EEPROM_readByte+0x6c>
		return ERROR;
    1a50:	1d 82       	std	Y+5, r1	; 0x05
    1a52:	21 c0       	rjmp	.+66     	; 0x1a96 <EEPROM_readByte+0xae>

	/*send the device address starting with constant ob1010 and then A8, A9, A10 from the memory address as they are part of the device address and finally followed by the R/W bit*/
	/*R/W -> 1 since we need to read a byte in memory*/
	TWI_writeByte((uint8)(0xA0 | ((memory_address & 0x0700)>>7) | 1));
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	9a 81       	ldd	r25, Y+2	; 0x02
    1a58:	80 70       	andi	r24, 0x00	; 0
    1a5a:	97 70       	andi	r25, 0x07	; 7
    1a5c:	88 0f       	add	r24, r24
    1a5e:	89 2f       	mov	r24, r25
    1a60:	88 1f       	adc	r24, r24
    1a62:	99 0b       	sbc	r25, r25
    1a64:	91 95       	neg	r25
    1a66:	81 6a       	ori	r24, 0xA1	; 161
    1a68:	0e 94 3d 09 	call	0x127a	; 0x127a <TWI_writeByte>
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MR_SLA_R_ACK)
    1a6c:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1a70:	80 34       	cpi	r24, 0x40	; 64
    1a72:	11 f0       	breq	.+4      	; 0x1a78 <EEPROM_readByte+0x90>
		return ERROR;
    1a74:	1d 82       	std	Y+5, r1	; 0x05
    1a76:	0f c0       	rjmp	.+30     	; 0x1a96 <EEPROM_readByte+0xae>

	/*Read the byte needed from gthe specific sent memory location*/
	*data = TWI_readByteWithNACK();
    1a78:	0e 94 69 09 	call	0x12d2	; 0x12d2 <TWI_readByteWithNACK>
    1a7c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a7e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a80:	80 83       	st	Z, r24
	/*Check for errors*/
	if(TWI_getStatus() != TWI_MR_SLA_R_NACK)
    1a82:	0e 94 7d 09 	call	0x12fa	; 0x12fa <TWI_getStatus>
    1a86:	88 33       	cpi	r24, 0x38	; 56
    1a88:	11 f0       	breq	.+4      	; 0x1a8e <EEPROM_readByte+0xa6>
		return ERROR;
    1a8a:	1d 82       	std	Y+5, r1	; 0x05
    1a8c:	04 c0       	rjmp	.+8      	; 0x1a96 <EEPROM_readByte+0xae>

	/*Send the Stop bit*/
	TWI_stop();
    1a8e:	0e 94 32 09 	call	0x1264	; 0x1264 <TWI_stop>

	return SUCCESS;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	8d 83       	std	Y+5, r24	; 0x05
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a98:	0f 90       	pop	r0
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <main>:


                                                     /*MAIN*/

int main (void)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	60 97       	sbiw	r28, 0x10	; 16
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
	SREG.bits.I_BIT = 1; /*enable the global interrupts*/
    1abc:	ef e5       	ldi	r30, 0x5F	; 95
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	80 68       	ori	r24, 0x80	; 128
    1ac4:	80 83       	st	Z, r24

	Buzzer_init(); /*Initializing the buzzer driver*/
    1ac6:	0e 94 2a 0c 	call	0x1854	; 0x1854 <Buzzer_init>
	DcMotor_Init(); /*Initializing the DC motor driver*/
    1aca:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <DcMotor_Init>

	/*UART Configuration with Baud rate = 9600, eight bits data, disabling parity and one stop bit*/
	UART_ConfigType UART_Configurations = {9600,EIGHT_BITS,DISABLE,ONE_BIT};
    1ace:	9e 01       	movw	r18, r28
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	3d 87       	std	Y+13, r19	; 0x0d
    1ad6:	2c 87       	std	Y+12, r18	; 0x0c
    1ad8:	8e e6       	ldi	r24, 0x6E	; 110
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9f 87       	std	Y+15, r25	; 0x0f
    1ade:	8e 87       	std	Y+14, r24	; 0x0e
    1ae0:	97 e0       	ldi	r25, 0x07	; 7
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ae6:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ae8:	00 80       	ld	r0, Z
    1aea:	2e 85       	ldd	r18, Y+14	; 0x0e
    1aec:	3f 85       	ldd	r19, Y+15	; 0x0f
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	3f 87       	std	Y+15, r19	; 0x0f
    1af4:	2e 87       	std	Y+14, r18	; 0x0e
    1af6:	ec 85       	ldd	r30, Y+12	; 0x0c
    1af8:	fd 85       	ldd	r31, Y+13	; 0x0d
    1afa:	00 82       	st	Z, r0
    1afc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1afe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b00:	2f 5f       	subi	r18, 0xFF	; 255
    1b02:	3f 4f       	sbci	r19, 0xFF	; 255
    1b04:	3d 87       	std	Y+13, r19	; 0x0d
    1b06:	2c 87       	std	Y+12, r18	; 0x0c
    1b08:	38 89       	ldd	r19, Y+16	; 0x10
    1b0a:	31 50       	subi	r19, 0x01	; 1
    1b0c:	38 8b       	std	Y+16, r19	; 0x10
    1b0e:	88 89       	ldd	r24, Y+16	; 0x10
    1b10:	88 23       	and	r24, r24
    1b12:	41 f7       	brne	.-48     	; 0x1ae4 <main+0x3c>
	UART_init(&UART_Configurations);
    1b14:	ce 01       	movw	r24, r28
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	0e 94 ba 0a 	call	0x1574	; 0x1574 <UART_init>

	/*I2C Configuratiosn with frequency 400 KHz and address 0x01*/
	TWI_ConfigType TWI_Configurations = {0x01,BAUD_RATE_400KHZ};
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	88 87       	std	Y+8, r24	; 0x08
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	89 87       	std	Y+9, r24	; 0x09
	TWI_init(&TWI_Configurations);
    1b24:	ce 01       	movw	r24, r28
    1b26:	08 96       	adiw	r24, 0x08	; 8
    1b28:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <TWI_init>

	Timer1_setCallBack(countTimerTicks); /*set the callback function of the timer*/
    1b2c:	8e e9       	ldi	r24, 0x9E	; 158
    1b2e:	9f e0       	ldi	r25, 0x0F	; 15
    1b30:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timer1_setCallBack>

	while(1)
	{
		/*Check for the received byte from hmi ECU and take an action accordinglys*/
		switch(UART_receiveByte())
    1b34:	0e 94 bb 0b 	call	0x1776	; 0x1776 <UART_receiveByte>
    1b38:	e8 2f       	mov	r30, r24
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	fb 87       	std	Y+11, r31	; 0x0b
    1b3e:	ea 87       	std	Y+10, r30	; 0x0a
    1b40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b44:	23 30       	cpi	r18, 0x03	; 3
    1b46:	31 05       	cpc	r19, r1
    1b48:	51 f1       	breq	.+84     	; 0x1b9e <main+0xf6>
    1b4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b4e:	84 30       	cpi	r24, 0x04	; 4
    1b50:	91 05       	cpc	r25, r1
    1b52:	54 f4       	brge	.+20     	; 0x1b68 <main+0xc0>
    1b54:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b56:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b58:	30 97       	sbiw	r30, 0x00	; 0
    1b5a:	c1 f0       	breq	.+48     	; 0x1b8c <main+0xe4>
    1b5c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b5e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b60:	22 30       	cpi	r18, 0x02	; 2
    1b62:	31 05       	cpc	r19, r1
    1b64:	b9 f0       	breq	.+46     	; 0x1b94 <main+0xec>
    1b66:	e6 cf       	rjmp	.-52     	; 0x1b34 <main+0x8c>
    1b68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6c:	86 30       	cpi	r24, 0x06	; 6
    1b6e:	91 05       	cpc	r25, r1
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <main+0xcc>
    1b72:	8a c0       	rjmp	.+276    	; 0x1c88 <main+0x1e0>
    1b74:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b76:	fb 85       	ldd	r31, Y+11	; 0x0b
    1b78:	e7 30       	cpi	r30, 0x07	; 7
    1b7a:	f1 05       	cpc	r31, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <main+0xd8>
    1b7e:	98 c0       	rjmp	.+304    	; 0x1cb0 <main+0x208>
    1b80:	2a 85       	ldd	r18, Y+10	; 0x0a
    1b82:	3b 85       	ldd	r19, Y+11	; 0x0b
    1b84:	25 30       	cpi	r18, 0x05	; 5
    1b86:	31 05       	cpc	r19, r1
    1b88:	69 f1       	breq	.+90     	; 0x1be4 <main+0x13c>
    1b8a:	d4 cf       	rjmp	.-88     	; 0x1b34 <main+0x8c>
		{
			case (MC1_READY):
			{
				UART_sendByte(MC2_READY);
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1b92:	d0 cf       	rjmp	.-96     	; 0x1b34 <main+0x8c>
				break;
			}
			case (MC1_FIRST_PASSWORD):
			{
				receivePassword(firstPasswordEntry); /*store first password*/
    1b94:	8e e7       	ldi	r24, 0x7E	; 126
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <receivePassword>
    1b9c:	cb cf       	rjmp	.-106    	; 0x1b34 <main+0x8c>
				break;
			}
			case (MC1_SECOND_PASSWORD):
			{
				receivePassword(secondPasswordEntry); /*store second password*/
    1b9e:	89 e7       	ldi	r24, 0x79	; 121
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <receivePassword>
				/*check if 2 passwords match or not*/
				if (checkPassword(firstPasswordEntry,secondPasswordEntry) == TRUE)
    1ba6:	8e e7       	ldi	r24, 0x7E	; 126
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	29 e7       	ldi	r18, 0x79	; 121
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	b9 01       	movw	r22, r18
    1bb0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <checkPassword>
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	41 f4       	brne	.+16     	; 0x1bc8 <main+0x120>
				{
					UART_sendByte(MC2_PASSWORDS_MATCH); /*send to the hmi ECU that they are the same*/
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
					passwordSaving(firstPasswordEntry); /*save the password in the EEPROM sicne 2 pass are matched*/
    1bbe:	8e e7       	ldi	r24, 0x7E	; 126
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <passwordSaving>
    1bc6:	b6 cf       	rjmp	.-148    	; 0x1b34 <main+0x8c>
				}
				else if(checkPassword(firstPasswordEntry,secondPasswordEntry) == FALSE)
    1bc8:	8e e7       	ldi	r24, 0x7E	; 126
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	29 e7       	ldi	r18, 0x79	; 121
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <checkPassword>
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <main+0x134>
    1bda:	ac cf       	rjmp	.-168    	; 0x1b34 <main+0x8c>
				{
					UART_sendByte(MC2_PASSWORDS_DONOT_MATCH); /*send to the hmi ECU that they are not the same*/
    1bdc:	84 e0       	ldi	r24, 0x04	; 4
    1bde:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1be2:	a8 cf       	rjmp	.-176    	; 0x1b34 <main+0x8c>
				}
				break;
			}
			case(MC1_OPEN_DOOR):
			{
				while(UART_receiveByte() != MC1_FIRST_PASSWORD);
    1be4:	0e 94 bb 0b 	call	0x1776	; 0x1776 <UART_receiveByte>
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <main+0x13c>
				receivePassword(firstPasswordEntry); /*receive the password*/
    1bec:	8e e7       	ldi	r24, 0x7E	; 126
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <receivePassword>
				if(checkPasswordInMemory() == TRUE) /*check if it the same password stored in the memory*/
    1bf4:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <checkPasswordInMemory>
    1bf8:	81 30       	cpi	r24, 0x01	; 1
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <main+0x156>
    1bfc:	41 c0       	rjmp	.+130    	; 0x1c80 <main+0x1d8>
				{
					UART_sendByte(MC2_PASSWORDS_MATCH); /*send that they are matched*/
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>

					/*open the door for 15 sec*/
					UART_sendByte(MC2_DOOR_UNLOCKING);
    1c04:	88 e0       	ldi	r24, 0x08	; 8
    1c06:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
					Timer1_init(&Timer1_Configurations);
    1c0a:	88 e6       	ldi	r24, 0x68	; 104
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Timer1_init>
					DcMotor_Rotate(CW,90);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	6a e5       	ldi	r22, 0x5A	; 90
    1c16:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DcMotor_Rotate>
					while(timerTicks != 15);
    1c1a:	80 91 78 00 	lds	r24, 0x0078
    1c1e:	8f 30       	cpi	r24, 0x0F	; 15
    1c20:	e1 f7       	brne	.-8      	; 0x1c1a <main+0x172>
					Timer1_deInit();
    1c22:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Timer1_deInit>
					timerTicks = 0;
    1c26:	10 92 78 00 	sts	0x0078, r1

					/*hold the door for 3 sec then*/
					Timer1_init(&Timer1_Configurations);
    1c2a:	88 e6       	ldi	r24, 0x68	; 104
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	0e 94 32 0a 	call	0x1464	; 0x1464 <Timer1_init>
					DcMotor_Rotate(STOP,0);
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DcMotor_Rotate>
					while(timerTicks != 3);
    1c3a:	80 91 78 00 	lds	r24, 0x0078
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	e1 f7       	brne	.-8      	; 0x1c3a <main+0x192>
					Timer1_deInit();
    1c42:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Timer1_deInit>
					timerTicks = 0;
    1c46:	10 92 78 00 	sts	0x0078, r1

					/*close the door again for 15 sec*/
					UART_sendByte(MC2_DOOR_LOCKING);
    1c4a:	89 e0       	ldi	r24, 0x09	; 9
    1c4c:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
					Timer1_init(&Timer1_Configurations);
    1c50:	88 e6       	ldi	r24, 0x68	; 104
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 32 0a 	call	0x1464	; 0x1464 <Timer1_init>
					DcMotor_Rotate(ACW,90);
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	6a e5       	ldi	r22, 0x5A	; 90
    1c5c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DcMotor_Rotate>
					while(timerTicks != 15);
    1c60:	80 91 78 00 	lds	r24, 0x0078
    1c64:	8f 30       	cpi	r24, 0x0F	; 15
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <main+0x1b8>
					Timer1_deInit();
    1c68:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Timer1_deInit>
					timerTicks = 0;
    1c6c:	10 92 78 00 	sts	0x0078, r1

					/*stop the motion of the motor since the program will be resetted to the menu option*/
					DcMotor_Rotate(STOP,0);
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <DcMotor_Rotate>

					UART_sendByte(MC2_RESET_PROGRAM);
    1c78:	80 e1       	ldi	r24, 0x10	; 16
    1c7a:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1c7e:	5a cf       	rjmp	.-332    	; 0x1b34 <main+0x8c>

				}
				else
				{
					UART_sendByte(MC2_PASSWORDS_DONOT_MATCH); /*if the password did not match the one stored in the memory*/
    1c80:	84 e0       	ldi	r24, 0x04	; 4
    1c82:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1c86:	56 cf       	rjmp	.-340    	; 0x1b34 <main+0x8c>
				}
				break;
			}
			case(MC1_CHANGE_PASSWORD):
			{
				while(UART_receiveByte() != MC1_FIRST_PASSWORD);
    1c88:	0e 94 bb 0b 	call	0x1776	; 0x1776 <UART_receiveByte>
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	e1 f7       	brne	.-8      	; 0x1c88 <main+0x1e0>
				receivePassword(firstPasswordEntry); /*receive the password*/
    1c90:	8e e7       	ldi	r24, 0x7E	; 126
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <receivePassword>
				if(checkPasswordInMemory() == TRUE)  /*check if it the same password stored in the memory*/
    1c98:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <checkPasswordInMemory>
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	21 f4       	brne	.+8      	; 0x1ca8 <main+0x200>
				{
					UART_sendByte(MC2_PASSWORDS_MATCH); /*send they are the same and thus the program will be resetted to create the password again*/
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1ca6:	46 cf       	rjmp	.-372    	; 0x1b34 <main+0x8c>
				}
				else
				{
					UART_sendByte(MC2_PASSWORDS_DONOT_MATCH); /*if the pass did not match the one stored in the memory*/
    1ca8:	84 e0       	ldi	r24, 0x04	; 4
    1caa:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1cae:	42 cf       	rjmp	.-380    	; 0x1b34 <main+0x8c>
				break;
			}
			case(MC1_SET_ALARM):
			{
				/*set alarm for 1 min then reset the program to retrun back to the menu option*/
				Timer1_init(&Timer1_Configurations);
    1cb0:	88 e6       	ldi	r24, 0x68	; 104
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 32 0a 	call	0x1464	; 0x1464 <Timer1_init>
				Buzzer_on();
    1cb8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <Buzzer_on>
				while(timerTicks != 60);
    1cbc:	80 91 78 00 	lds	r24, 0x0078
    1cc0:	8c 33       	cpi	r24, 0x3C	; 60
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <main+0x214>
				Timer1_deInit();
    1cc4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <Timer1_deInit>
				Buzzer_off(); /*turn off the buzzer after 1 min*/
    1cc8:	0e 94 47 0c 	call	0x188e	; 0x188e <Buzzer_off>
				timerTicks = 0;
    1ccc:	10 92 78 00 	sts	0x0078, r1
				UART_sendByte(MC2_RESET_PROGRAM);
    1cd0:	80 e1       	ldi	r24, 0x10	; 16
    1cd2:	0e 94 a7 0b 	call	0x174e	; 0x174e <UART_sendByte>
    1cd6:	2e cf       	rjmp	.-420    	; 0x1b34 <main+0x8c>

00001cd8 <checkPasswordInMemory>:

												/*Functions Protoypes*/

/*Function to check the password if it matches the one stored in the memory*/
uint8 checkPasswordInMemory(void)
{
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <checkPasswordInMemory+0x6>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
	uint8 i = 0, memoryLocationStart = 99; /*password is stored in a random location inside the EEPROM to avoid hacking*/
    1ce2:	1a 82       	std	Y+2, r1	; 0x02
    1ce4:	83 e6       	ldi	r24, 0x63	; 99
    1ce6:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1ce8:	1a 82       	std	Y+2, r1	; 0x02
    1cea:	13 c0       	rjmp	.+38     	; 0x1d12 <checkPasswordInMemory+0x3a>
	{
		EEPROM_readByte(memoryLocationStart,&secondPasswordEntry[i]); /*read the password stored in the memory and save it temporarily*/
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	48 2f       	mov	r20, r24
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9c 01       	movw	r18, r24
    1cfa:	27 58       	subi	r18, 0x87	; 135
    1cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfe:	ca 01       	movw	r24, r20
    1d00:	b9 01       	movw	r22, r18
    1d02:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <EEPROM_readByte>
		memoryLocationStart++;
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	8f 5f       	subi	r24, 0xFF	; 255
    1d0a:	89 83       	std	Y+1, r24	; 0x01

/*Function to check the password if it matches the one stored in the memory*/
uint8 checkPasswordInMemory(void)
{
	uint8 i = 0, memoryLocationStart = 99; /*password is stored in a random location inside the EEPROM to avoid hacking*/
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	8f 5f       	subi	r24, 0xFF	; 255
    1d10:	8a 83       	std	Y+2, r24	; 0x02
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	85 30       	cpi	r24, 0x05	; 5
    1d16:	50 f3       	brcs	.-44     	; 0x1cec <checkPasswordInMemory+0x14>
	{
		EEPROM_readByte(memoryLocationStart,&secondPasswordEntry[i]); /*read the password stored in the memory and save it temporarily*/
		memoryLocationStart++;
	}
	return checkPassword(firstPasswordEntry,secondPasswordEntry); /*check if the 2 passwords match or not*/
    1d18:	8e e7       	ldi	r24, 0x7E	; 126
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	29 e7       	ldi	r18, 0x79	; 121
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	b9 01       	movw	r22, r18
    1d22:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <checkPassword>
}
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <checkPassword>:


/*Function to check 2 given passwords if they match or not*/
uint8 checkPassword(uint8* firstPasswordEntry, uint8* secondPasswordEntry)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <checkPassword+0x6>
    1d36:	00 d0       	rcall	.+0      	; 0x1d38 <checkPassword+0x8>
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <checkPassword+0xa>
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    1d3e:	9c 83       	std	Y+4, r25	; 0x04
    1d40:	8b 83       	std	Y+3, r24	; 0x03
    1d42:	7e 83       	std	Y+6, r23	; 0x06
    1d44:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i = 0, PasswordMatchFlag = 0;
    1d46:	1a 82       	std	Y+2, r1	; 0x02
    1d48:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1d4a:	1a 82       	std	Y+2, r1	; 0x02
    1d4c:	1c c0       	rjmp	.+56     	; 0x1d86 <checkPassword+0x56>
	{
		if (firstPasswordEntry[i] == secondPasswordEntry[i]) /*check each location corresponding to the other one if they are equal*/
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	fc 01       	movw	r30, r24
    1d5a:	e2 0f       	add	r30, r18
    1d5c:	f3 1f       	adc	r31, r19
    1d5e:	40 81       	ld	r20, Z
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	e2 0f       	add	r30, r18
    1d6e:	f3 1f       	adc	r31, r19
    1d70:	80 81       	ld	r24, Z
    1d72:	48 17       	cp	r20, r24
    1d74:	31 f4       	brne	.+12     	; 0x1d82 <checkPassword+0x52>
		{
			PasswordMatchFlag = TRUE;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	89 83       	std	Y+1, r24	; 0x01

/*Function to check 2 given passwords if they match or not*/
uint8 checkPassword(uint8* firstPasswordEntry, uint8* secondPasswordEntry)
{
	uint8 i = 0, PasswordMatchFlag = 0;
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	8f 5f       	subi	r24, 0xFF	; 255
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <checkPassword+0x56>
		{
			PasswordMatchFlag = TRUE;
		}
		else
		{
			PasswordMatchFlag = FALSE; /*if ay digit is not the same break from the loop since the 2 passwords do not match*/
    1d82:	19 82       	std	Y+1, r1	; 0x01
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <checkPassword+0x5c>

/*Function to check 2 given passwords if they match or not*/
uint8 checkPassword(uint8* firstPasswordEntry, uint8* secondPasswordEntry)
{
	uint8 i = 0, PasswordMatchFlag = 0;
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	85 30       	cpi	r24, 0x05	; 5
    1d8a:	08 f3       	brcs	.-62     	; 0x1d4e <checkPassword+0x1e>
		{
			PasswordMatchFlag = FALSE; /*if ay digit is not the same break from the loop since the 2 passwords do not match*/
			break;
		}
	}
	return PasswordMatchFlag;
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d8e:	26 96       	adiw	r28, 0x06	; 6
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <receivePassword>:

/*Function to receive more than one byte password length and store it in the array*/
void receivePassword(uint8* password)
{
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	61 97       	sbiw	r28, 0x11	; 17
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	99 8b       	std	Y+17, r25	; 0x11
    1dba:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    1dbc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i = 0; i < PASSWORD_LENGTH;i++)
    1dbe:	1f 86       	std	Y+15, r1	; 0x0f
    1dc0:	81 c0       	rjmp	.+258    	; 0x1ec4 <receivePassword+0x124>
	{
		password[i] = UART_receiveByte(); /*store byte by byte*/
    1dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	88 89       	ldd	r24, Y+16	; 0x10
    1dca:	99 89       	ldd	r25, Y+17	; 0x11
    1dcc:	8c 01       	movw	r16, r24
    1dce:	02 0f       	add	r16, r18
    1dd0:	13 1f       	adc	r17, r19
    1dd2:	0e 94 bb 0b 	call	0x1776	; 0x1776 <UART_receiveByte>
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 83       	st	Z, r24
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	a0 e7       	ldi	r26, 0x70	; 112
    1de0:	b1 e4       	ldi	r27, 0x41	; 65
    1de2:	8b 87       	std	Y+11, r24	; 0x0b
    1de4:	9c 87       	std	Y+12, r25	; 0x0c
    1de6:	ad 87       	std	Y+13, r26	; 0x0d
    1de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	4a ef       	ldi	r20, 0xFA	; 250
    1df8:	54 e4       	ldi	r21, 0x44	; 68
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	8f 83       	std	Y+7, r24	; 0x07
    1e04:	98 87       	std	Y+8, r25	; 0x08
    1e06:	a9 87       	std	Y+9, r26	; 0x09
    1e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0c:	78 85       	ldd	r23, Y+8	; 0x08
    1e0e:	89 85       	ldd	r24, Y+9	; 0x09
    1e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e8       	ldi	r20, 0x80	; 128
    1e18:	5f e3       	ldi	r21, 0x3F	; 63
    1e1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <receivePassword+0x8c>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9e 83       	std	Y+6, r25	; 0x06
    1e28:	8d 83       	std	Y+5, r24	; 0x05
    1e2a:	3f c0       	rjmp	.+126    	; 0x1eaa <receivePassword+0x10a>
	else if (__tmp > 65535)
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	3f ef       	ldi	r19, 0xFF	; 255
    1e38:	4f e7       	ldi	r20, 0x7F	; 127
    1e3a:	57 e4       	ldi	r21, 0x47	; 71
    1e3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	4c f5       	brge	.+82     	; 0x1e96 <receivePassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e2       	ldi	r20, 0x20	; 32
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	0f c0       	rjmp	.+30     	; 0x1e8c <receivePassword+0xec>
    1e6e:	88 ec       	ldi	r24, 0xC8	; 200
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 83       	std	Y+4, r25	; 0x04
    1e74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	01 97       	sbiw	r24, 0x01	; 1
    1e7c:	f1 f7       	brne	.-4      	; 0x1e7a <receivePassword+0xda>
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	69 f7       	brne	.-38     	; 0x1e6e <receivePassword+0xce>
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <receivePassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1eac:	9e 81       	ldd	r25, Y+6	; 0x06
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <receivePassword+0x116>
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01

/*Function to receive more than one byte password length and store it in the array*/
void receivePassword(uint8* password)
{
	uint8 i = 0;
	for(i = 0; i < PASSWORD_LENGTH;i++)
    1ebe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec0:	8f 5f       	subi	r24, 0xFF	; 255
    1ec2:	8f 87       	std	Y+15, r24	; 0x0f
    1ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec6:	85 30       	cpi	r24, 0x05	; 5
    1ec8:	08 f4       	brcc	.+2      	; 0x1ecc <receivePassword+0x12c>
    1eca:	7b cf       	rjmp	.-266    	; 0x1dc2 <receivePassword+0x22>
	{
		password[i] = UART_receiveByte(); /*store byte by byte*/
		_delay_ms(15);
	}
}
    1ecc:	61 96       	adiw	r28, 0x11	; 17
    1ece:	0f b6       	in	r0, 0x3f	; 63
    1ed0:	f8 94       	cli
    1ed2:	de bf       	out	0x3e, r29	; 62
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	cd bf       	out	0x3d, r28	; 61
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <passwordSaving>:

/*Function to save the password in the EEPROM through the I2C*/
void passwordSaving(uint8* password)
{
    1ee2:	df 93       	push	r29
    1ee4:	cf 93       	push	r28
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <passwordSaving+0x6>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <passwordSaving+0x8>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0, memoryLocationStart = 99; /*store it in a random location inside the EEPROM to avoid hacking*/
    1ef2:	1a 82       	std	Y+2, r1	; 0x02
    1ef4:	83 e6       	ldi	r24, 0x63	; 99
    1ef6:	89 83       	std	Y+1, r24	; 0x01
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1ef8:	1a 82       	std	Y+2, r1	; 0x02
    1efa:	16 c0       	rjmp	.+44     	; 0x1f28 <passwordSaving+0x46>
	{
		EEPROM_writeByte(memoryLocationStart++,password[i]); /*write byte by byte to teh memory*/
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
    1efe:	48 2f       	mov	r20, r24
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	89 83       	std	Y+1, r24	; 0x01
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	fc 01       	movw	r30, r24
    1f14:	e2 0f       	add	r30, r18
    1f16:	f3 1f       	adc	r31, r19
    1f18:	20 81       	ld	r18, Z
    1f1a:	ca 01       	movw	r24, r20
    1f1c:	62 2f       	mov	r22, r18
    1f1e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <EEPROM_writeByte>

/*Function to save the password in the EEPROM through the I2C*/
void passwordSaving(uint8* password)
{
	uint8 i = 0, memoryLocationStart = 99; /*store it in a random location inside the EEPROM to avoid hacking*/
	for(i = 0; i < PASSWORD_LENGTH; i++)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	8f 5f       	subi	r24, 0xFF	; 255
    1f26:	8a 83       	std	Y+2, r24	; 0x02
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	85 30       	cpi	r24, 0x05	; 5
    1f2c:	38 f3       	brcs	.-50     	; 0x1efc <passwordSaving+0x1a>
	{
		EEPROM_writeByte(memoryLocationStart++,password[i]); /*write byte by byte to teh memory*/
	}
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <countTimerTicks>:

/*It is the call back function of the timer*/
void countTimerTicks(void)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
	timerTicks++; /*increment the timer ticks by 1 upon each interrupt*/
    1f44:	80 91 78 00 	lds	r24, 0x0078
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	80 93 78 00 	sts	0x0078, r24
}
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <__udivmodhi4>:
    1f54:	aa 1b       	sub	r26, r26
    1f56:	bb 1b       	sub	r27, r27
    1f58:	51 e1       	ldi	r21, 0x11	; 17
    1f5a:	07 c0       	rjmp	.+14     	; 0x1f6a <__udivmodhi4_ep>

00001f5c <__udivmodhi4_loop>:
    1f5c:	aa 1f       	adc	r26, r26
    1f5e:	bb 1f       	adc	r27, r27
    1f60:	a6 17       	cp	r26, r22
    1f62:	b7 07       	cpc	r27, r23
    1f64:	10 f0       	brcs	.+4      	; 0x1f6a <__udivmodhi4_ep>
    1f66:	a6 1b       	sub	r26, r22
    1f68:	b7 0b       	sbc	r27, r23

00001f6a <__udivmodhi4_ep>:
    1f6a:	88 1f       	adc	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	5a 95       	dec	r21
    1f70:	a9 f7       	brne	.-22     	; 0x1f5c <__udivmodhi4_loop>
    1f72:	80 95       	com	r24
    1f74:	90 95       	com	r25
    1f76:	bc 01       	movw	r22, r24
    1f78:	cd 01       	movw	r24, r26
    1f7a:	08 95       	ret

00001f7c <__udivmodsi4>:
    1f7c:	a1 e2       	ldi	r26, 0x21	; 33
    1f7e:	1a 2e       	mov	r1, r26
    1f80:	aa 1b       	sub	r26, r26
    1f82:	bb 1b       	sub	r27, r27
    1f84:	fd 01       	movw	r30, r26
    1f86:	0d c0       	rjmp	.+26     	; 0x1fa2 <__udivmodsi4_ep>

00001f88 <__udivmodsi4_loop>:
    1f88:	aa 1f       	adc	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	ee 1f       	adc	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	a2 17       	cp	r26, r18
    1f92:	b3 07       	cpc	r27, r19
    1f94:	e4 07       	cpc	r30, r20
    1f96:	f5 07       	cpc	r31, r21
    1f98:	20 f0       	brcs	.+8      	; 0x1fa2 <__udivmodsi4_ep>
    1f9a:	a2 1b       	sub	r26, r18
    1f9c:	b3 0b       	sbc	r27, r19
    1f9e:	e4 0b       	sbc	r30, r20
    1fa0:	f5 0b       	sbc	r31, r21

00001fa2 <__udivmodsi4_ep>:
    1fa2:	66 1f       	adc	r22, r22
    1fa4:	77 1f       	adc	r23, r23
    1fa6:	88 1f       	adc	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	1a 94       	dec	r1
    1fac:	69 f7       	brne	.-38     	; 0x1f88 <__udivmodsi4_loop>
    1fae:	60 95       	com	r22
    1fb0:	70 95       	com	r23
    1fb2:	80 95       	com	r24
    1fb4:	90 95       	com	r25
    1fb6:	9b 01       	movw	r18, r22
    1fb8:	ac 01       	movw	r20, r24
    1fba:	bd 01       	movw	r22, r26
    1fbc:	cf 01       	movw	r24, r30
    1fbe:	08 95       	ret

00001fc0 <__prologue_saves__>:
    1fc0:	2f 92       	push	r2
    1fc2:	3f 92       	push	r3
    1fc4:	4f 92       	push	r4
    1fc6:	5f 92       	push	r5
    1fc8:	6f 92       	push	r6
    1fca:	7f 92       	push	r7
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	ca 1b       	sub	r28, r26
    1fea:	db 0b       	sbc	r29, r27
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
    1ff6:	09 94       	ijmp

00001ff8 <__epilogue_restores__>:
    1ff8:	2a 88       	ldd	r2, Y+18	; 0x12
    1ffa:	39 88       	ldd	r3, Y+17	; 0x11
    1ffc:	48 88       	ldd	r4, Y+16	; 0x10
    1ffe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2000:	6e 84       	ldd	r6, Y+14	; 0x0e
    2002:	7d 84       	ldd	r7, Y+13	; 0x0d
    2004:	8c 84       	ldd	r8, Y+12	; 0x0c
    2006:	9b 84       	ldd	r9, Y+11	; 0x0b
    2008:	aa 84       	ldd	r10, Y+10	; 0x0a
    200a:	b9 84       	ldd	r11, Y+9	; 0x09
    200c:	c8 84       	ldd	r12, Y+8	; 0x08
    200e:	df 80       	ldd	r13, Y+7	; 0x07
    2010:	ee 80       	ldd	r14, Y+6	; 0x06
    2012:	fd 80       	ldd	r15, Y+5	; 0x05
    2014:	0c 81       	ldd	r16, Y+4	; 0x04
    2016:	1b 81       	ldd	r17, Y+3	; 0x03
    2018:	aa 81       	ldd	r26, Y+2	; 0x02
    201a:	b9 81       	ldd	r27, Y+1	; 0x01
    201c:	ce 0f       	add	r28, r30
    201e:	d1 1d       	adc	r29, r1
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	de bf       	out	0x3e, r29	; 62
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	cd bf       	out	0x3d, r28	; 61
    202a:	ed 01       	movw	r28, r26
    202c:	08 95       	ret

0000202e <_exit>:
    202e:	f8 94       	cli

00002030 <__stop_program>:
    2030:	ff cf       	rjmp	.-2      	; 0x2030 <__stop_program>
