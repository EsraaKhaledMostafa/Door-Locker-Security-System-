
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003088  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  00003088  0000311c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800114  00800114  000031d0  2**0
                  ALLOC
  3 .stab         00003390  00000000  00000000  000031d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00007640  00000000  00000000  00006560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000dba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000dce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000de50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000fa99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010984  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011734  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00011894  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011b21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000122ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 32       	cpi	r26, 0x24	; 36
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 12 	call	0x2402	; 0x2402 <main>
      8a:	0c 94 42 18 	jmp	0x3084	; 0x3084 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ee 17 	jmp	0x2fdc	; 0x2fdc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d6 17 	jmp	0x2fac	; 0x2fac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA.byte,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA.byte,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB.byte,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB.byte,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC.byte,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC.byte,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD.byte,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD.byte,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
	{

	}
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
			{
				if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA.byte, pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA.byte, pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTB_ID:
			{
				if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB.byte, pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB.byte, pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTC_ID:
			{
				if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC.byte, pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC.byte, pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				break;
			}
			case PORTD_ID:
			{
				if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD.byte, pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD.byte, pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
				break;
			}
		}
	}

}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pinValue = 0;
     f04:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <GPIO_readPin+0x20>
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	10 f0       	brcs	.+4      	; 0xf16 <GPIO_readPin+0x24>
	{
		pinValue = LOGIC_LOW;
     f12:	19 82       	std	Y+1, r1	; 0x01
     f14:	99 c0       	rjmp	.+306    	; 0x1048 <GPIO_readPin+0x156>
	}
	else
	{
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	b1 f1       	breq	.+108    	; 0xf96 <GPIO_readPin+0xa4>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	71 f0       	breq	.+28     	; 0xf5a <GPIO_readPin+0x68>
     f3e:	84 c0       	rjmp	.+264    	; 0x1048 <GPIO_readPin+0x156>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	09 f4       	brne	.+2      	; 0xf4c <GPIO_readPin+0x5a>
     f4a:	43 c0       	rjmp	.+134    	; 0xfd2 <GPIO_readPin+0xe0>
     f4c:	8c 81       	ldd	r24, Y+4	; 0x04
     f4e:	9d 81       	ldd	r25, Y+5	; 0x05
     f50:	83 30       	cpi	r24, 0x03	; 3
     f52:	91 05       	cpc	r25, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <GPIO_readPin+0x66>
     f56:	5b c0       	rjmp	.+182    	; 0x100e <GPIO_readPin+0x11c>
     f58:	77 c0       	rjmp	.+238    	; 0x1048 <GPIO_readPin+0x156>
		{
		case PORTA_ID:
			{
				pinValue = GET_BIT(PINA.byte,pin_num);
     f5a:	e9 e3       	ldi	r30, 0x39	; 57
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <GPIO_readPin+0x82>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	2a 95       	dec	r18
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <GPIO_readPin+0x7e>
     f78:	9a 01       	movw	r18, r20
     f7a:	28 23       	and	r18, r24
     f7c:	39 23       	and	r19, r25
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_readPin+0x9a>
     f88:	55 95       	asr	r21
     f8a:	47 95       	ror	r20
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_readPin+0x96>
     f90:	ca 01       	movw	r24, r20
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	59 c0       	rjmp	.+178    	; 0x1048 <GPIO_readPin+0x156>
				break;
			}

		case PORTB_ID:
			{
				pinValue = GET_BIT(PINB.byte,pin_num);
     f96:	e6 e3       	ldi	r30, 0x36	; 54
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <GPIO_readPin+0xbe>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <GPIO_readPin+0xba>
     fb4:	9a 01       	movw	r18, r20
     fb6:	28 23       	and	r18, r24
     fb8:	39 23       	and	r19, r25
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	88 2f       	mov	r24, r24
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a9 01       	movw	r20, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_readPin+0xd6>
     fc4:	55 95       	asr	r21
     fc6:	47 95       	ror	r20
     fc8:	8a 95       	dec	r24
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_readPin+0xd2>
     fcc:	ca 01       	movw	r24, r20
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	3b c0       	rjmp	.+118    	; 0x1048 <GPIO_readPin+0x156>
				break;
			}

		case PORTC_ID:
			{
				pinValue = GET_BIT(PINC.byte,pin_num);
     fd2:	e3 e3       	ldi	r30, 0x33	; 51
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_readPin+0xfa>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	2a 95       	dec	r18
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_readPin+0xf6>
     ff0:	9a 01       	movw	r18, r20
     ff2:	28 23       	and	r18, r24
     ff4:	39 23       	and	r19, r25
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <GPIO_readPin+0x112>
    1000:	55 95       	asr	r21
    1002:	47 95       	ror	r20
    1004:	8a 95       	dec	r24
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <GPIO_readPin+0x10e>
    1008:	ca 01       	movw	r24, r20
    100a:	89 83       	std	Y+1, r24	; 0x01
    100c:	1d c0       	rjmp	.+58     	; 0x1048 <GPIO_readPin+0x156>
				break;
			}
		case PORTD_ID:
			{
				pinValue = GET_BIT(PIND.byte,pin_num);
    100e:	e0 e3       	ldi	r30, 0x30	; 48
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	48 2f       	mov	r20, r24
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <GPIO_readPin+0x136>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	2a 95       	dec	r18
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <GPIO_readPin+0x132>
    102c:	9a 01       	movw	r18, r20
    102e:	28 23       	and	r18, r24
    1030:	39 23       	and	r19, r25
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	a9 01       	movw	r20, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <GPIO_readPin+0x14e>
    103c:	55 95       	asr	r21
    103e:	47 95       	ror	r20
    1040:	8a 95       	dec	r24
    1042:	e2 f7       	brpl	.-8      	; 0x103c <GPIO_readPin+0x14a>
    1044:	ca 01       	movw	r24, r20
    1046:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}
	return pinValue;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <GPIO_setupPortDirection+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <GPIO_setupPortDirection+0x8>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	90 f5       	brcc	.+100    	; 0x10d4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3c 83       	std	Y+4, r19	; 0x04
    1078:	2b 83       	std	Y+3, r18	; 0x03
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	d1 f0       	breq	.+52     	; 0x10b8 <GPIO_setupPortDirection+0x5e>
    1084:	2b 81       	ldd	r18, Y+3	; 0x03
    1086:	3c 81       	ldd	r19, Y+4	; 0x04
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	2c f4       	brge	.+10     	; 0x1098 <GPIO_setupPortDirection+0x3e>
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	61 f0       	breq	.+24     	; 0x10ae <GPIO_setupPortDirection+0x54>
    1096:	1e c0       	rjmp	.+60     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
    1098:	2b 81       	ldd	r18, Y+3	; 0x03
    109a:	3c 81       	ldd	r19, Y+4	; 0x04
    109c:	22 30       	cpi	r18, 0x02	; 2
    109e:	31 05       	cpc	r19, r1
    10a0:	81 f0       	breq	.+32     	; 0x10c2 <GPIO_setupPortDirection+0x68>
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	91 05       	cpc	r25, r1
    10aa:	81 f0       	breq	.+32     	; 0x10cc <GPIO_setupPortDirection+0x72>
    10ac:	13 c0       	rjmp	.+38     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA.byte = direction;
    10ae:	ea e3       	ldi	r30, 0x3A	; 58
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	80 83       	st	Z, r24
    10b6:	0e c0       	rjmp	.+28     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB.byte = direction;
    10b8:	e7 e3       	ldi	r30, 0x37	; 55
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	80 83       	st	Z, r24
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC.byte = direction;
    10c2:	e4 e3       	ldi	r30, 0x34	; 52
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	80 83       	st	Z, r24
    10ca:	04 c0       	rjmp	.+8      	; 0x10d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD.byte = direction;
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <GPIO_writePort+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <GPIO_writePort+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	90 f5       	brcc	.+100    	; 0x115c <GPIO_writePort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3c 83       	std	Y+4, r19	; 0x04
    1100:	2b 83       	std	Y+3, r18	; 0x03
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	d1 f0       	breq	.+52     	; 0x1140 <GPIO_writePort+0x5e>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	2c f4       	brge	.+10     	; 0x1120 <GPIO_writePort+0x3e>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	61 f0       	breq	.+24     	; 0x1136 <GPIO_writePort+0x54>
    111e:	1e c0       	rjmp	.+60     	; 0x115c <GPIO_writePort+0x7a>
    1120:	2b 81       	ldd	r18, Y+3	; 0x03
    1122:	3c 81       	ldd	r19, Y+4	; 0x04
    1124:	22 30       	cpi	r18, 0x02	; 2
    1126:	31 05       	cpc	r19, r1
    1128:	81 f0       	breq	.+32     	; 0x114a <GPIO_writePort+0x68>
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	81 f0       	breq	.+32     	; 0x1154 <GPIO_writePort+0x72>
    1134:	13 c0       	rjmp	.+38     	; 0x115c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA.byte = value;
    1136:	eb e3       	ldi	r30, 0x3B	; 59
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	80 83       	st	Z, r24
    113e:	0e c0       	rjmp	.+28     	; 0x115c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB.byte = value;
    1140:	e8 e3       	ldi	r30, 0x38	; 56
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	80 83       	st	Z, r24
    1148:	09 c0       	rjmp	.+18     	; 0x115c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC.byte = value;
    114a:	e5 e3       	ldi	r30, 0x35	; 53
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	80 83       	st	Z, r24
    1152:	04 c0       	rjmp	.+8      	; 0x115c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD.byte = value;
    1154:	e2 e3       	ldi	r30, 0x32	; 50
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	80 83       	st	Z, r24
			break;
		}

	}

}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	00 d0       	rcall	.+0      	; 0x1170 <GPIO_readPort+0x6>
    1170:	00 d0       	rcall	.+0      	; 0x1172 <GPIO_readPort+0x8>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PIN_regValue = LOGIC_LOW;
    1178:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	90 f5       	brcc	.+100    	; 0x11e4 <GPIO_readPort+0x7a>
	{

	}
	else
	{
		switch(port_num)
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	3c 83       	std	Y+4, r19	; 0x04
    1188:	2b 83       	std	Y+3, r18	; 0x03
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	91 05       	cpc	r25, r1
    1192:	d1 f0       	breq	.+52     	; 0x11c8 <GPIO_readPort+0x5e>
    1194:	2b 81       	ldd	r18, Y+3	; 0x03
    1196:	3c 81       	ldd	r19, Y+4	; 0x04
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	2c f4       	brge	.+10     	; 0x11a8 <GPIO_readPort+0x3e>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	61 f0       	breq	.+24     	; 0x11be <GPIO_readPort+0x54>
    11a6:	1e c0       	rjmp	.+60     	; 0x11e4 <GPIO_readPort+0x7a>
    11a8:	2b 81       	ldd	r18, Y+3	; 0x03
    11aa:	3c 81       	ldd	r19, Y+4	; 0x04
    11ac:	22 30       	cpi	r18, 0x02	; 2
    11ae:	31 05       	cpc	r19, r1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <GPIO_readPort+0x68>
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	83 30       	cpi	r24, 0x03	; 3
    11b8:	91 05       	cpc	r25, r1
    11ba:	81 f0       	breq	.+32     	; 0x11dc <GPIO_readPort+0x72>
    11bc:	13 c0       	rjmp	.+38     	; 0x11e4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			{
				PIN_regValue = PINA.byte;
    11be:	e9 e3       	ldi	r30, 0x39	; 57
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	0e c0       	rjmp	.+28     	; 0x11e4 <GPIO_readPort+0x7a>
				break;
			}
		case PORTB_ID:
			{
				PIN_regValue = PINB.byte;
    11c8:	e6 e3       	ldi	r30, 0x36	; 54
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	89 83       	std	Y+1, r24	; 0x01
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <GPIO_readPort+0x7a>
				break;
			}
		case PORTC_ID:
			{
				PIN_regValue = PINC.byte;
    11d2:	e3 e3       	ldi	r30, 0x33	; 51
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	89 83       	std	Y+1, r24	; 0x01
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <GPIO_readPort+0x7a>
				break;
			}
		case PORTD_ID:
			{
				PIN_regValue = PIND.byte;
    11dc:	e0 e3       	ldi	r30, 0x30	; 48
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	89 83       	std	Y+1, r24	; 0x01
				break;
			}
		}
	}
	return PIN_regValue;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <__vector_9>:



/*Interrupt Service Routines*/
ISR (TIMER1_OVF_vect)
{
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
	/*Call the Callback function*/
	if(g_callback_ptr != NULL_PTR)
    121e:	80 91 14 01 	lds	r24, 0x0114
    1222:	90 91 15 01 	lds	r25, 0x0115
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	29 f0       	breq	.+10     	; 0x1234 <__vector_9+0x40>
	{
		(*g_callback_ptr)();
    122a:	e0 91 14 01 	lds	r30, 0x0114
    122e:	f0 91 15 01 	lds	r31, 0x0115
    1232:	09 95       	icall
	}
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	bf 91       	pop	r27
    123e:	af 91       	pop	r26
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	7f 91       	pop	r23
    1246:	6f 91       	pop	r22
    1248:	5f 91       	pop	r21
    124a:	4f 91       	pop	r20
    124c:	3f 91       	pop	r19
    124e:	2f 91       	pop	r18
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__vector_7>:

ISR (TIMER1_COMPA_vect)
{
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
	/*Call the Callback function*/
	if(g_callback_ptr != NULL_PTR)
    1284:	80 91 14 01 	lds	r24, 0x0114
    1288:	90 91 15 01 	lds	r25, 0x0115
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	29 f0       	breq	.+10     	; 0x129a <__vector_7+0x40>
		{
			(*g_callback_ptr)();
    1290:	e0 91 14 01 	lds	r30, 0x0114
    1294:	f0 91 15 01 	lds	r31, 0x0115
    1298:	09 95       	icall
		}
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	0f 90       	pop	r0
    12bc:	1f 90       	pop	r1
    12be:	18 95       	reti

000012c0 <Timer1_init>:

/*Functions Definitions*/

/*Function to initialize the Timer driver*/
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <Timer1_init+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <Timer1_init+0x8>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
	/*Set Timer1 Initial value to the required one from the configuration structure*/
	TCNT1 = Config_Ptr->initial_value;
    12d0:	ac e4       	ldi	r26, 0x4C	; 76
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	9c 93       	st	X, r25
    12e0:	8e 93       	st	-X, r24

	/*Choose the mode of timer either Compare Mode or Normal Mode*/
	switch(Config_Ptr->mode)
    12e2:	e9 81       	ldd	r30, Y+1	; 0x01
    12e4:	fa 81       	ldd	r31, Y+2	; 0x02
    12e6:	85 81       	ldd	r24, Z+5	; 0x05
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3c 83       	std	Y+4, r19	; 0x04
    12ee:	2b 83       	std	Y+3, r18	; 0x03
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	31 f0       	breq	.+12     	; 0x1304 <Timer1_init+0x44>
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	3c 81       	ldd	r19, Y+4	; 0x04
    12fc:	24 30       	cpi	r18, 0x04	; 4
    12fe:	31 05       	cpc	r19, r1
    1300:	c9 f0       	breq	.+50     	; 0x1334 <Timer1_init+0x74>
    1302:	3f c0       	rjmp	.+126    	; 0x1382 <Timer1_init+0xc2>
	{
		case(NORMAL_MODE):
		{
			/*Enabling the Overflow(Normal) Mode Interrupt*/
			TIMSK |= (1<<TOIE1);
    1304:	a9 e5       	ldi	r26, 0x59	; 89
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e9 e5       	ldi	r30, 0x59	; 89
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	84 60       	ori	r24, 0x04	; 4
    1310:	8c 93       	st	X, r24

			/*Normal Mode -> WGM010 & WGM11 in TCCR1A = 0, and WGM13 & WGM12 in TCCR1B = 0*/
			TCCR1A = (1<<FOC1A); /*For Choosing non PWM Mode*/
    1312:	ef e4       	ldi	r30, 0x4F	; 79
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	88 e0       	ldi	r24, 0x08	; 8
    1318:	80 83       	st	Z, r24

			/*Choosing the prescaler value for activating the CLK*/
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    131a:	ae e4       	ldi	r26, 0x4E	; 78
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ee e4       	ldi	r30, 0x4E	; 78
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	98 2f       	mov	r25, r24
    1326:	98 7f       	andi	r25, 0xF8	; 248
    1328:	e9 81       	ldd	r30, Y+1	; 0x01
    132a:	fa 81       	ldd	r31, Y+2	; 0x02
    132c:	84 81       	ldd	r24, Z+4	; 0x04
    132e:	89 2b       	or	r24, r25
    1330:	8c 93       	st	X, r24
    1332:	27 c0       	rjmp	.+78     	; 0x1382 <Timer1_init+0xc2>
			break;
		}
		case (COMPARE_A_MODE):
		{
			/*Put the compare value in the Compare register*/
			OCR1A = Config_Ptr->compare_value;
    1334:	aa e4       	ldi	r26, 0x4A	; 74
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e9 81       	ldd	r30, Y+1	; 0x01
    133a:	fa 81       	ldd	r31, Y+2	; 0x02
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	93 81       	ldd	r25, Z+3	; 0x03
    1340:	11 96       	adiw	r26, 0x01	; 1
    1342:	9c 93       	st	X, r25
    1344:	8e 93       	st	-X, r24

			/*Enabling the Compare Mode Interrupt*/
			TIMSK |= (1<<OCIE1A);
    1346:	a9 e5       	ldi	r26, 0x59	; 89
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e9 e5       	ldi	r30, 0x59	; 89
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 61       	ori	r24, 0x10	; 16
    1352:	8c 93       	st	X, r24

			/*Compare Mode -> WGM10 & WGM11 in TCCR1A = 0, and WGM13 = 0 & WGM12 = 1 in TCCR1B*/
			TCCR1A = (1<<FOC1A); /*For Choosing non PWM Mode*/
    1354:	ef e4       	ldi	r30, 0x4F	; 79
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	88 e0       	ldi	r24, 0x08	; 8
    135a:	80 83       	st	Z, r24


			/*Choosing the prescaler value for activating the CLK*/
			TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    135c:	ae e4       	ldi	r26, 0x4E	; 78
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	ee e4       	ldi	r30, 0x4E	; 78
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	98 2f       	mov	r25, r24
    1368:	98 7f       	andi	r25, 0xF8	; 248
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	84 81       	ldd	r24, Z+4	; 0x04
    1370:	89 2b       	or	r24, r25
    1372:	8c 93       	st	X, r24
			TCCR1B |= (1<<WGM12);
    1374:	ae e4       	ldi	r26, 0x4E	; 78
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ee e4       	ldi	r30, 0x4E	; 78
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	88 60       	ori	r24, 0x08	; 8
    1380:	8c 93       	st	X, r24
			break;
		}
	}
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <Timer1_deInit>:

/*Function to disable the Timer1*/
void Timer1_deInit(void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0; /*Reset the initial value of timer*/
    1398:	ec e4       	ldi	r30, 0x4C	; 76
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	11 82       	std	Z+1, r1	; 0x01
    139e:	10 82       	st	Z, r1
	TCCR1B = 0; /*Deactivate the clock*/
    13a0:	ee e4       	ldi	r30, 0x4E	; 78
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	10 82       	st	Z, r1
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <Timer1_setCallBack>:

/*Function to set the Call Back function address*/
void Timer1_setCallBack(void(*a_ptr)(void))
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <Timer1_setCallBack+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
	g_callback_ptr = a_ptr; /*Store the Callback Function Address in a global variable so as not to be poped from stack on leaving this function*/
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	90 93 15 01 	sts	0x0115, r25
    13c2:	80 93 14 01 	sts	0x0114, r24
}
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <UART_init>:

/*Functions Definitions*/

/*Initialization function of the UART Driver*/
void UART_init(UART_ConfigType* Config_Ptr)
{
    13d0:	df 93       	push	r29
    13d2:	cf 93       	push	r28
    13d4:	00 d0       	rcall	.+0      	; 0x13d6 <UART_init+0x6>
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <UART_init+0x8>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <UART_init+0xa>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
	/*value to be written in UBRR Register according to baud rate*/
	uint16 ubrr_value = 0;
    13e2:	1a 82       	std	Y+2, r1	; 0x02
    13e4:	19 82       	std	Y+1, r1	; 0x01

	UCSRA.bits.U2X = 1; /*Asynchronous with double the UART transmission speed*/
    13e6:	eb e2       	ldi	r30, 0x2B	; 43
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	82 60       	ori	r24, 0x02	; 2
    13ee:	80 83       	st	Z, r24
	UCSRB.bits.TXEN = 1; /*Tx enable*/
    13f0:	ea e2       	ldi	r30, 0x2A	; 42
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	80 83       	st	Z, r24
	UCSRB.bits.RXEN = 1; /*Rx enable*/
    13fa:	ea e2       	ldi	r30, 0x2A	; 42
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 61       	ori	r24, 0x10	; 16
    1402:	80 83       	st	Z, r24

	/*URSEL should  = 1 to access UCSRC*/
	UCSRC.bits.URSEL = 1;
    1404:	e0 e4       	ldi	r30, 0x40	; 64
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 68       	ori	r24, 0x80	; 128
    140c:	80 83       	st	Z, r24
	/*Choose the Parity --> UPM0 & UPM1*/
	UCSRC.byte = (UCSRC.byte & 0xCF) | (Config_Ptr->parity << 4);
    140e:	a0 e4       	ldi	r26, 0x40	; 64
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e0 e4       	ldi	r30, 0x40	; 64
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	2f 7c       	andi	r18, 0xCF	; 207
    141c:	eb 81       	ldd	r30, Y+3	; 0x03
    141e:	fc 81       	ldd	r31, Y+4	; 0x04
    1420:	85 81       	ldd	r24, Z+5	; 0x05
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	82 95       	swap	r24
    1428:	92 95       	swap	r25
    142a:	90 7f       	andi	r25, 0xF0	; 240
    142c:	98 27       	eor	r25, r24
    142e:	80 7f       	andi	r24, 0xF0	; 240
    1430:	98 27       	eor	r25, r24
    1432:	82 2b       	or	r24, r18
    1434:	8c 93       	st	X, r24

	/*Choose the Stop Bits*/
	UCSRC.bits.USBS = Config_Ptr->stop;
    1436:	a0 e4       	ldi	r26, 0x40	; 64
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	eb 81       	ldd	r30, Y+3	; 0x03
    143c:	fc 81       	ldd	r31, Y+4	; 0x04
    143e:	86 81       	ldd	r24, Z+6	; 0x06
    1440:	81 70       	andi	r24, 0x01	; 1
    1442:	81 70       	andi	r24, 0x01	; 1
    1444:	98 2f       	mov	r25, r24
    1446:	99 0f       	add	r25, r25
    1448:	99 0f       	add	r25, r25
    144a:	99 0f       	add	r25, r25
    144c:	8c 91       	ld	r24, X
    144e:	87 7f       	andi	r24, 0xF7	; 247
    1450:	89 2b       	or	r24, r25
    1452:	8c 93       	st	X, r24

	/*Choose the data length*/
	switch(Config_Ptr->data)
    1454:	eb 81       	ldd	r30, Y+3	; 0x03
    1456:	fc 81       	ldd	r31, Y+4	; 0x04
    1458:	84 81       	ldd	r24, Z+4	; 0x04
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3e 83       	std	Y+6, r19	; 0x06
    1460:	2d 83       	std	Y+5, r18	; 0x05
    1462:	8d 81       	ldd	r24, Y+5	; 0x05
    1464:	9e 81       	ldd	r25, Y+6	; 0x06
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	91 05       	cpc	r25, r1
    146a:	d9 f1       	breq	.+118    	; 0x14e2 <UART_init+0x112>
    146c:	2d 81       	ldd	r18, Y+5	; 0x05
    146e:	3e 81       	ldd	r19, Y+6	; 0x06
    1470:	23 30       	cpi	r18, 0x03	; 3
    1472:	31 05       	cpc	r19, r1
    1474:	54 f4       	brge	.+20     	; 0x148a <UART_init+0xba>
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	91 f0       	breq	.+36     	; 0x14a2 <UART_init+0xd2>
    147e:	2d 81       	ldd	r18, Y+5	; 0x05
    1480:	3e 81       	ldd	r19, Y+6	; 0x06
    1482:	21 30       	cpi	r18, 0x01	; 1
    1484:	31 05       	cpc	r19, r1
    1486:	e9 f0       	breq	.+58     	; 0x14c2 <UART_init+0xf2>
    1488:	5b c0       	rjmp	.+182    	; 0x1540 <UART_init+0x170>
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	b9 f1       	breq	.+110    	; 0x1502 <UART_init+0x132>
    1494:	2d 81       	ldd	r18, Y+5	; 0x05
    1496:	3e 81       	ldd	r19, Y+6	; 0x06
    1498:	24 30       	cpi	r18, 0x04	; 4
    149a:	31 05       	cpc	r19, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <UART_init+0xd0>
    149e:	41 c0       	rjmp	.+130    	; 0x1522 <UART_init+0x152>
    14a0:	4f c0       	rjmp	.+158    	; 0x1540 <UART_init+0x170>
	{
		case (FIVE_BITS):
			UCSRC.bits.UCSZ0 = 0;
    14a2:	e0 e4       	ldi	r30, 0x40	; 64
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	8d 7f       	andi	r24, 0xFD	; 253
    14aa:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 0;
    14ac:	e0 e4       	ldi	r30, 0x40	; 64
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8b 7f       	andi	r24, 0xFB	; 251
    14b4:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    14b6:	ea e2       	ldi	r30, 0x2A	; 42
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	8b 7f       	andi	r24, 0xFB	; 251
    14be:	80 83       	st	Z, r24
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <UART_init+0x170>
			break;
		case (SIX_BITS):
			UCSRC.bits.UCSZ0 = 1;
    14c2:	e0 e4       	ldi	r30, 0x40	; 64
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	82 60       	ori	r24, 0x02	; 2
    14ca:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 0;
    14cc:	e0 e4       	ldi	r30, 0x40	; 64
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8b 7f       	andi	r24, 0xFB	; 251
    14d4:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    14d6:	ea e2       	ldi	r30, 0x2A	; 42
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	8b 7f       	andi	r24, 0xFB	; 251
    14de:	80 83       	st	Z, r24
    14e0:	2f c0       	rjmp	.+94     	; 0x1540 <UART_init+0x170>
			break;
		case (SEVEN_BITS):
			UCSRC.bits.UCSZ0 = 0;
    14e2:	e0 e4       	ldi	r30, 0x40	; 64
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	8d 7f       	andi	r24, 0xFD	; 253
    14ea:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 1;
    14ec:	e0 e4       	ldi	r30, 0x40	; 64
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	84 60       	ori	r24, 0x04	; 4
    14f4:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    14f6:	ea e2       	ldi	r30, 0x2A	; 42
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	8b 7f       	andi	r24, 0xFB	; 251
    14fe:	80 83       	st	Z, r24
    1500:	1f c0       	rjmp	.+62     	; 0x1540 <UART_init+0x170>
			break;
		case (EIGHT_BITS):
			UCSRC.bits.UCSZ0 = 1;
    1502:	e0 e4       	ldi	r30, 0x40	; 64
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	82 60       	ori	r24, 0x02	; 2
    150a:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 1;
    150c:	e0 e4       	ldi	r30, 0x40	; 64
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	84 60       	ori	r24, 0x04	; 4
    1514:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 0;
    1516:	ea e2       	ldi	r30, 0x2A	; 42
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8b 7f       	andi	r24, 0xFB	; 251
    151e:	80 83       	st	Z, r24
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <UART_init+0x170>
			break;
		case (NINE_BITS):
			UCSRC.bits.UCSZ0 = 1;
    1522:	e0 e4       	ldi	r30, 0x40	; 64
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	82 60       	ori	r24, 0x02	; 2
    152a:	80 83       	st	Z, r24
			UCSRC.bits.UCSZ1 = 1;
    152c:	e0 e4       	ldi	r30, 0x40	; 64
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	80 83       	st	Z, r24
			UCSRB.bits.UCSZ2 = 1;
    1536:	ea e2       	ldi	r30, 0x2A	; 42
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	80 83       	st	Z, r24
			break;
	}

	/*Calculate the value to be written in UBRR Register according to baud rate*/
	ubrr_value = (uint16)(((F_CPU/(8UL * Config_Ptr->baudrate))) - 1);
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 81       	ld	r24, Z
    1546:	91 81       	ldd	r25, Z+1	; 0x01
    1548:	a2 81       	ldd	r26, Z+2	; 0x02
    154a:	b3 81       	ldd	r27, Z+3	; 0x03
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	aa 1f       	adc	r26, r26
    1552:	bb 1f       	adc	r27, r27
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	aa 1f       	adc	r26, r26
    155a:	bb 1f       	adc	r27, r27
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	aa 1f       	adc	r26, r26
    1562:	bb 1f       	adc	r27, r27
    1564:	9c 01       	movw	r18, r24
    1566:	ad 01       	movw	r20, r26
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	92 e1       	ldi	r25, 0x12	; 18
    156c:	aa e7       	ldi	r26, 0x7A	; 122
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <__udivmodsi4>
    1578:	da 01       	movw	r26, r20
    157a:	c9 01       	movw	r24, r18
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01

	/*URSEL should = 0 to access UBRRH*/
	UBRRH.byte = (ubrr_value>>8);
    1582:	e0 e4       	ldi	r30, 0x40	; 64
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	89 2f       	mov	r24, r25
    158c:	99 27       	eor	r25, r25
    158e:	80 83       	st	Z, r24
	UBRRL.byte = ubrr_value;
    1590:	e9 e2       	ldi	r30, 0x29	; 41
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	80 83       	st	Z, r24

}
    1598:	26 96       	adiw	r28, 0x06	; 6
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <UART_sendByte>:

/*Function responsible for send byte to another UART device.*/
void UART_sendByte(const uint8 data)
{
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	0f 92       	push	r0
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	89 83       	std	Y+1, r24	; 0x01
	/*wait for the UDRE Flag to be set indicating that the UDR register is empty and previous data was transmitted to avoid overwriting*/
	while(UCSRA.bits.UDRE == 0);
    15b6:	eb e2       	ldi	r30, 0x2B	; 43
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 72       	andi	r24, 0x20	; 32
    15be:	88 23       	and	r24, r24
    15c0:	d1 f3       	breq	.-12     	; 0x15b6 <UART_sendByte+0xc>

	/*Put the required data to be sent in the UDR Regsiter*/
	UDR.byte = data;
    15c2:	ec e2       	ldi	r30, 0x2C	; 44
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	80 83       	st	Z, r24
}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <UART_receiveByte>:

/*Functional responsible for receive byte from another UART device.*/
uint8 UART_receiveByte(void)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	/*wait for the RXC Flag to be set indicating that the UART finished receiving the data*/
	while(UCSRA.bits.RXC == 0);
    15da:	eb e2       	ldi	r30, 0x2B	; 43
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 78       	andi	r24, 0x80	; 128
    15e2:	88 23       	and	r24, r24
    15e4:	d1 f3       	breq	.-12     	; 0x15da <UART_receiveByte+0x8>

	/*read the data received from the UDR Register*/
	return UDR.byte;
    15e6:	ec e2       	ldi	r30, 0x2C	; 44
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
}
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <UART_sendString>:

/*Send the required string through UART to the other UART device.*/
void UART_sendString(const uint8* str)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <UART_sendString+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	0a c0       	rjmp	.+20     	; 0x1616 <UART_sendString+0x24>
	/*Send the whole string byte by byte*/
	while(*str != '\0')
	{
		UART_sendByte(*str);
    1602:	e9 81       	ldd	r30, Y+1	; 0x01
    1604:	fa 81       	ldd	r31, Y+2	; 0x02
    1606:	80 81       	ld	r24, Z
    1608:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
		str++;
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	89 83       	std	Y+1, r24	; 0x01

/*Send the required string through UART to the other UART device.*/
void UART_sendString(const uint8* str)
{
	/*Send the whole string byte by byte*/
	while(*str != '\0')
    1616:	e9 81       	ldd	r30, Y+1	; 0x01
    1618:	fa 81       	ldd	r31, Y+2	; 0x02
    161a:	80 81       	ld	r24, Z
    161c:	88 23       	and	r24, r24
    161e:	89 f7       	brne	.-30     	; 0x1602 <UART_sendString+0x10>
	{
		UART_sendByte(*str);
		str++;
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <UART_receiveString>:

/*Receive the required string until the '#' symbol through UART from the other UART device.*/
void UART_receiveString(uint8* str)
{
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <UART_receiveString+0xa>
    1634:	0f 92       	push	r0
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	9b 83       	std	Y+3, r25	; 0x03
    163c:	8a 83       	std	Y+2, r24	; 0x02
	/*counter*/
	uint8 i = 0;
    163e:	19 82       	std	Y+1, r1	; 0x01

	/*Receive first byte*/
	str[i] = UART_receiveByte();
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	9b 81       	ldd	r25, Y+3	; 0x03
    164a:	8c 01       	movw	r16, r24
    164c:	02 0f       	add	r16, r18
    164e:	13 1f       	adc	r17, r19
    1650:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    1654:	f8 01       	movw	r30, r16
    1656:	80 83       	st	Z, r24
    1658:	0f c0       	rjmp	.+30     	; 0x1678 <UART_receiveString+0x4e>

	while(str[i] != '#') /*# is the key for sending and receiving*/
	{
		/*receive new byte from the string in the next free location*/
		i++;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_receiveByte();
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	9b 81       	ldd	r25, Y+3	; 0x03
    166a:	8c 01       	movw	r16, r24
    166c:	02 0f       	add	r16, r18
    166e:	13 1f       	adc	r17, r19
    1670:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    1674:	f8 01       	movw	r30, r16
    1676:	80 83       	st	Z, r24
	uint8 i = 0;

	/*Receive first byte*/
	str[i] = UART_receiveByte();

	while(str[i] != '#') /*# is the key for sending and receiving*/
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	28 2f       	mov	r18, r24
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	fc 01       	movw	r30, r24
    1684:	e2 0f       	add	r30, r18
    1686:	f3 1f       	adc	r31, r19
    1688:	80 81       	ld	r24, Z
    168a:	83 32       	cpi	r24, 0x23	; 35
    168c:	31 f7       	brne	.-52     	; 0x165a <UART_receiveString+0x30>
		/*receive new byte from the string in the next free location*/
		i++;
		str[i] = UART_receiveByte();
	}

	str[i] = '\0'; /*put the null terminator for the string*/
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	fc 01       	movw	r30, r24
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	10 82       	st	Z, r1
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	cf 91       	pop	r28
    16a8:	df 91       	pop	r29
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	08 95       	ret

000016b0 <KEYPAD_getPressedKey>:


/*Functions Definitions*/

uint8 KEYPAD_getPressedKey(void)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	60 97       	sbiw	r28, 0x10	; 16
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;

	/*Setting the Keypad row buttons pins as input*/
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	40 e0       	ldi	r20, 0x00	; 0
    16de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	63 e0       	ldi	r22, 0x03	; 3
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*Setting the Keypad column buttons pins as input*/
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	64 e0       	ldi	r22, 0x04	; 4
    16f0:	40 e0       	ldi	r20, 0x00	; 0
    16f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	65 e0       	ldi	r22, 0x05	; 5
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	66 e0       	ldi	r22, 0x06	; 6
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/*will not need to configure the pins of the last column if keypad is 4x3*/
#if(KEYPAD_COLS_NUM == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	67 e0       	ldi	r22, 0x07	; 7
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row = 0; row < KEYPAD_ROWS_NUM; row++)
    1714:	1f 86       	std	Y+15, r1	; 0x0f
    1716:	ab c0       	rjmp	.+342    	; 0x186e <KEYPAD_getPressedKey+0x1be>
		{
			/*On every loop all row ports should be input except one*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	6f 85       	ldd	r22, Y+15	; 0x0f
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	6f 85       	ldd	r22, Y+15	; 0x0f
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			/*Loop on columns to know which column the switch is pressed on*/
			for(col = 0; col < KEYPAD_COLS_NUM; col++)
    172c:	18 8a       	std	Y+16, r1	; 0x10
    172e:	22 c0       	rjmp	.+68     	; 0x1774 <KEYPAD_getPressedKey+0xc4>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	98 2f       	mov	r25, r24
    1734:	9c 5f       	subi	r25, 0xFC	; 252
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	69 2f       	mov	r22, r25
    173a:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    173e:	88 23       	and	r24, r24
    1740:	b1 f4       	brne	.+44     	; 0x176e <KEYPAD_getPressedKey+0xbe>
						return ((row * KEYPAD_COLS_NUM)+col+1);
					#else
						#if (KEYPAD_COLS_NUM == 3)
							return (KEYPAD_4x3_adjustKeyNumber((row * KEYPAD_COLS_NUM)+col+1));
						#elif (KEYPAD_COLS_NUM == 4)
							return (KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_COLS_NUM)+col+1));
    1742:	8f 85       	ldd	r24, Y+15	; 0x0f
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	98 2f       	mov	r25, r24
    1752:	88 89       	ldd	r24, Y+16	; 0x10
    1754:	89 0f       	add	r24, r25
    1756:	8f 5f       	subi	r24, 0xFF	; 255
    1758:	0e 94 3c 0c 	call	0x1878	; 0x1878 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10);
		}
	}
}
    175c:	60 96       	adiw	r28, 0x10	; 16
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	cf 91       	pop	r28
    176a:	df 91       	pop	r29
    176c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);

			/*Loop on columns to know which column the switch is pressed on*/
			for(col = 0; col < KEYPAD_COLS_NUM; col++)
    176e:	88 89       	ldd	r24, Y+16	; 0x10
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	88 8b       	std	Y+16, r24	; 0x10
    1774:	88 89       	ldd	r24, Y+16	; 0x10
    1776:	84 30       	cpi	r24, 0x04	; 4
    1778:	d8 f2       	brcs	.-74     	; 0x1730 <KEYPAD_getPressedKey+0x80>
							return (KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_COLS_NUM)+col+1));
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	6f 85       	ldd	r22, Y+15	; 0x0f
    177e:	40 e0       	ldi	r20, 0x00	; 0
    1780:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e2       	ldi	r26, 0x20	; 32
    178a:	b1 e4       	ldi	r27, 0x41	; 65
    178c:	8b 87       	std	Y+11, r24	; 0x0b
    178e:	9c 87       	std	Y+12, r25	; 0x0c
    1790:	ad 87       	std	Y+13, r26	; 0x0d
    1792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	98 87       	std	Y+8, r25	; 0x08
    17b0:	a9 87       	std	Y+9, r26	; 0x09
    17b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <KEYPAD_getPressedKey+0x186>
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <KEYPAD_getPressedKey+0x174>
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <KEYPAD_getPressedKey+0x168>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <KEYPAD_getPressedKey+0x1b0>
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row = 0; row < KEYPAD_ROWS_NUM; row++)
    1868:	8f 85       	ldd	r24, Y+15	; 0x0f
    186a:	8f 5f       	subi	r24, 0xFF	; 255
    186c:	8f 87       	std	Y+15, r24	; 0x0f
    186e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1870:	84 30       	cpi	r24, 0x04	; 4
    1872:	08 f4       	brcc	.+2      	; 0x1876 <KEYPAD_getPressedKey+0x1c6>
    1874:	51 cf       	rjmp	.-350    	; 0x1718 <KEYPAD_getPressedKey+0x68>
    1876:	4e cf       	rjmp	.-356    	; 0x1714 <KEYPAD_getPressedKey+0x64>

00001878 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_COLS_NUM == 4)
/*Update the keypad pressed button value with the correct 4x3 shape*/
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	00 d0       	rcall	.+0      	; 0x187e <KEYPAD_4x4_adjustKeyNumber+0x6>
    187e:	00 d0       	rcall	.+0      	; 0x1880 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypadButton = 0;
    1886:	19 82       	std	Y+1, r1	; 0x01
		switch(button_number)
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	3c 83       	std	Y+4, r19	; 0x04
    1890:	2b 83       	std	Y+3, r18	; 0x03
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	9c 81       	ldd	r25, Y+4	; 0x04
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	91 05       	cpc	r25, r1
    189a:	09 f4       	brne	.+2      	; 0x189e <KEYPAD_4x4_adjustKeyNumber+0x26>
    189c:	70 c0       	rjmp	.+224    	; 0x197e <KEYPAD_4x4_adjustKeyNumber+0x106>
    189e:	2b 81       	ldd	r18, Y+3	; 0x03
    18a0:	3c 81       	ldd	r19, Y+4	; 0x04
    18a2:	29 30       	cpi	r18, 0x09	; 9
    18a4:	31 05       	cpc	r19, r1
    18a6:	5c f5       	brge	.+86     	; 0x18fe <KEYPAD_4x4_adjustKeyNumber+0x86>
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	9c 81       	ldd	r25, Y+4	; 0x04
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	91 05       	cpc	r25, r1
    18b0:	09 f4       	brne	.+2      	; 0x18b4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    18b2:	59 c0       	rjmp	.+178    	; 0x1966 <KEYPAD_4x4_adjustKeyNumber+0xee>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	25 30       	cpi	r18, 0x05	; 5
    18ba:	31 05       	cpc	r19, r1
    18bc:	9c f4       	brge	.+38     	; 0x18e4 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	82 30       	cpi	r24, 0x02	; 2
    18c4:	91 05       	cpc	r25, r1
    18c6:	09 f4       	brne	.+2      	; 0x18ca <KEYPAD_4x4_adjustKeyNumber+0x52>
    18c8:	48 c0       	rjmp	.+144    	; 0x195a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	23 30       	cpi	r18, 0x03	; 3
    18d0:	31 05       	cpc	r19, r1
    18d2:	0c f0       	brlt	.+2      	; 0x18d6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    18d4:	45 c0       	rjmp	.+138    	; 0x1960 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	09 f4       	brne	.+2      	; 0x18e2 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    18e0:	39 c0       	rjmp	.+114    	; 0x1954 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    18e2:	67 c0       	rjmp	.+206    	; 0x19b2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	26 30       	cpi	r18, 0x06	; 6
    18ea:	31 05       	cpc	r19, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <KEYPAD_4x4_adjustKeyNumber+0x78>
    18ee:	41 c0       	rjmp	.+130    	; 0x1972 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	87 30       	cpi	r24, 0x07	; 7
    18f6:	91 05       	cpc	r25, r1
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0x84>
    18fa:	3e c0       	rjmp	.+124    	; 0x1978 <KEYPAD_4x4_adjustKeyNumber+0x100>
    18fc:	37 c0       	rjmp	.+110    	; 0x196c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    18fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1900:	3c 81       	ldd	r19, Y+4	; 0x04
    1902:	2c 30       	cpi	r18, 0x0C	; 12
    1904:	31 05       	cpc	r19, r1
    1906:	09 f4       	brne	.+2      	; 0x190a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1908:	46 c0       	rjmp	.+140    	; 0x1996 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	8d 30       	cpi	r24, 0x0D	; 13
    1910:	91 05       	cpc	r25, r1
    1912:	5c f4       	brge	.+22     	; 0x192a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1914:	2b 81       	ldd	r18, Y+3	; 0x03
    1916:	3c 81       	ldd	r19, Y+4	; 0x04
    1918:	2a 30       	cpi	r18, 0x0A	; 10
    191a:	31 05       	cpc	r19, r1
    191c:	b1 f1       	breq	.+108    	; 0x198a <KEYPAD_4x4_adjustKeyNumber+0x112>
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	8b 30       	cpi	r24, 0x0B	; 11
    1924:	91 05       	cpc	r25, r1
    1926:	a4 f5       	brge	.+104    	; 0x1990 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1928:	2d c0       	rjmp	.+90     	; 0x1984 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    192a:	2b 81       	ldd	r18, Y+3	; 0x03
    192c:	3c 81       	ldd	r19, Y+4	; 0x04
    192e:	2e 30       	cpi	r18, 0x0E	; 14
    1930:	31 05       	cpc	r19, r1
    1932:	b9 f1       	breq	.+110    	; 0x19a2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	8e 30       	cpi	r24, 0x0E	; 14
    193a:	91 05       	cpc	r25, r1
    193c:	7c f1       	brlt	.+94     	; 0x199c <KEYPAD_4x4_adjustKeyNumber+0x124>
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	2f 30       	cpi	r18, 0x0F	; 15
    1944:	31 05       	cpc	r19, r1
    1946:	79 f1       	breq	.+94     	; 0x19a6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	80 31       	cpi	r24, 0x10	; 16
    194e:	91 05       	cpc	r25, r1
    1950:	69 f1       	breq	.+90     	; 0x19ac <KEYPAD_4x4_adjustKeyNumber+0x134>
    1952:	2f c0       	rjmp	.+94     	; 0x19b2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
		{
			case 1:
				keypadButton = 7;
    1954:	87 e0       	ldi	r24, 0x07	; 7
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	2e c0       	rjmp	.+92     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 2:
				keypadButton = 8;
    195a:	88 e0       	ldi	r24, 0x08	; 8
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	2b c0       	rjmp	.+86     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 3:
				keypadButton = 9;
    1960:	89 e0       	ldi	r24, 0x09	; 9
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	28 c0       	rjmp	.+80     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 4:
				keypadButton = '%';
    1966:	85 e2       	ldi	r24, 0x25	; 37
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	25 c0       	rjmp	.+74     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 5:
				keypadButton = 4;
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	22 c0       	rjmp	.+68     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 6:
				keypadButton = 5;
    1972:	85 e0       	ldi	r24, 0x05	; 5
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	1f c0       	rjmp	.+62     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 7:
				keypadButton = 6;
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	1c c0       	rjmp	.+56     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 8:
				keypadButton = 'x';
    197e:	88 e7       	ldi	r24, 0x78	; 120
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	19 c0       	rjmp	.+50     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 9:
				keypadButton = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	16 c0       	rjmp	.+44     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 10:
				keypadButton = 2;
    198a:	82 e0       	ldi	r24, 0x02	; 2
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 11:
				keypadButton = 3;
    1990:	83 e0       	ldi	r24, 0x03	; 3
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	10 c0       	rjmp	.+32     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 12:
				keypadButton = '-';
    1996:	8d e2       	ldi	r24, 0x2D	; 45
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	0d c0       	rjmp	.+26     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 13:
				keypadButton = 'c';
    199c:	83 e6       	ldi	r24, 0x63	; 99
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	0a c0       	rjmp	.+20     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 14:
				keypadButton = 0;
    19a2:	19 82       	std	Y+1, r1	; 0x01
    19a4:	08 c0       	rjmp	.+16     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 15:
				keypadButton = '=';
    19a6:	8d e3       	ldi	r24, 0x3D	; 61
    19a8:	89 83       	std	Y+1, r24	; 0x01
    19aa:	05 c0       	rjmp	.+10     	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			case 16:
				keypadButton = '+';
    19ac:	8b e2       	ldi	r24, 0x2B	; 43
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
			default:
				keypadButton = button_number;
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		return keypadButton;
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <LCD_init>:
/*Functions Definitions*/


/*Initialization of LCD with the required mode and configuration*/
void LCD_init(void)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	2e 97       	sbiw	r28, 0x0e	; 14
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
	/*Configure the direction of RS and E pins as o/p pins*/
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	66 e0       	ldi	r22, 0x06	; 6
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_ENABLE_PORT,LCD_ENABLE_PIN,PIN_OUTPUT);
    19e4:	83 e0       	ldi	r24, 0x03	; 3
    19e6:	67 e0       	ldi	r22, 0x07	; 7
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 ea       	ldi	r26, 0xA0	; 160
    19f4:	b1 e4       	ldi	r27, 0x41	; 65
    19f6:	8b 87       	std	Y+11, r24	; 0x0b
    19f8:	9c 87       	std	Y+12, r25	; 0x0c
    19fa:	ad 87       	std	Y+13, r26	; 0x0d
    19fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	4a ef       	ldi	r20, 0xFA	; 250
    1a0c:	54 e4       	ldi	r21, 0x44	; 68
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8f 83       	std	Y+7, r24	; 0x07
    1a18:	98 87       	std	Y+8, r25	; 0x08
    1a1a:	a9 87       	std	Y+9, r26	; 0x09
    1a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a20:	78 85       	ldd	r23, Y+8	; 0x08
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e8       	ldi	r20, 0x80	; 128
    1a2c:	5f e3       	ldi	r21, 0x3F	; 63
    1a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a32:	88 23       	and	r24, r24
    1a34:	2c f4       	brge	.+10     	; 0x1a40 <LCD_init+0x7a>
		__ticks = 1;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a40:	6f 81       	ldd	r22, Y+7	; 0x07
    1a42:	78 85       	ldd	r23, Y+8	; 0x08
    1a44:	89 85       	ldd	r24, Y+9	; 0x09
    1a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a48:	20 e0       	ldi	r18, 0x00	; 0
    1a4a:	3f ef       	ldi	r19, 0xFF	; 255
    1a4c:	4f e7       	ldi	r20, 0x7F	; 127
    1a4e:	57 e4       	ldi	r21, 0x47	; 71
    1a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a54:	18 16       	cp	r1, r24
    1a56:	4c f5       	brge	.+82     	; 0x1aaa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	40 e2       	ldi	r20, 0x20	; 32
    1a66:	51 e4       	ldi	r21, 0x41	; 65
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e 83       	std	Y+6, r25	; 0x06
    1a7e:	8d 83       	std	Y+5, r24	; 0x05
    1a80:	0f c0       	rjmp	.+30     	; 0x1aa0 <LCD_init+0xda>
    1a82:	88 ec       	ldi	r24, 0xC8	; 200
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9c 83       	std	Y+4, r25	; 0x04
    1a88:	8b 83       	std	Y+3, r24	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_init+0xc8>
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	69 f7       	brne	.-38     	; 0x1a82 <LCD_init+0xbc>
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1aac:	78 85       	ldd	r23, Y+8	; 0x08
    1aae:	89 85       	ldd	r24, Y+9	; 0x09
    1ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9e 83       	std	Y+6, r25	; 0x06
    1abc:	8d 83       	std	Y+5, r24	; 0x05
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_init+0x104>
    1ace:	9a 83       	std	Y+2, r25	; 0x02
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	/*choose the mode of operation of LCD*/
	LCD_sendCommand(LCD_MODE_2LINES_4BITS);

#elif (LCD_DATA_BITS_MODE == 8)
	/*Configure the data port as o/p port*/
	GPIO_setupPortDirection(LCD_DATA_BUS_PORT,PORT_OUTPUT);
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	6f ef       	ldi	r22, 0xFF	; 255
    1ad6:	0e 94 2d 08 	call	0x105a	; 0x105a <GPIO_setupPortDirection>

	/*choose the mode of operation of LCD*/
	LCD_sendCommand(LCD_MODE_2LINES_8BITS);
    1ada:	88 e3       	ldi	r24, 0x38	; 56
    1adc:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_sendCommand>

#endif

	/*Send initialization display commands*/
	LCD_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    1ae0:	8c e0       	ldi	r24, 0x0C	; 12
    1ae2:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_sendCommand>
}
    1aec:	2e 96       	adiw	r28, 0x0e	; 14
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <LCD_sendCommand>:


/*Send the required command to the LCD*/
void LCD_sendCommand(uint8 command)
{
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	e9 97       	sbiw	r28, 0x39	; 57
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	89 af       	std	Y+57, r24	; 0x39
	/*RS = 0 for sending command*/
	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_LOW);
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	66 e0       	ldi	r22, 0x06	; 6
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e8       	ldi	r26, 0x80	; 128
    1b24:	bf e3       	ldi	r27, 0x3F	; 63
    1b26:	8d ab       	std	Y+53, r24	; 0x35
    1b28:	9e ab       	std	Y+54, r25	; 0x36
    1b2a:	af ab       	std	Y+55, r26	; 0x37
    1b2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1b30:	7e a9       	ldd	r23, Y+54	; 0x36
    1b32:	8f a9       	ldd	r24, Y+55	; 0x37
    1b34:	98 ad       	ldd	r25, Y+56	; 0x38
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	4a ef       	ldi	r20, 0xFA	; 250
    1b3c:	54 e4       	ldi	r21, 0x44	; 68
    1b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	89 ab       	std	Y+49, r24	; 0x31
    1b48:	9a ab       	std	Y+50, r25	; 0x32
    1b4a:	ab ab       	std	Y+51, r26	; 0x33
    1b4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b50:	7a a9       	ldd	r23, Y+50	; 0x32
    1b52:	8b a9       	ldd	r24, Y+51	; 0x33
    1b54:	9c a9       	ldd	r25, Y+52	; 0x34
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	5f e3       	ldi	r21, 0x3F	; 63
    1b5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	2c f4       	brge	.+10     	; 0x1b70 <LCD_sendCommand+0x72>
		__ticks = 1;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	98 ab       	std	Y+48, r25	; 0x30
    1b6c:	8f a7       	std	Y+47, r24	; 0x2f
    1b6e:	3f c0       	rjmp	.+126    	; 0x1bee <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b70:	69 a9       	ldd	r22, Y+49	; 0x31
    1b72:	7a a9       	ldd	r23, Y+50	; 0x32
    1b74:	8b a9       	ldd	r24, Y+51	; 0x33
    1b76:	9c a9       	ldd	r25, Y+52	; 0x34
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	3f ef       	ldi	r19, 0xFF	; 255
    1b7c:	4f e7       	ldi	r20, 0x7F	; 127
    1b7e:	57 e4       	ldi	r21, 0x47	; 71
    1b80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b84:	18 16       	cp	r1, r24
    1b86:	4c f5       	brge	.+82     	; 0x1bda <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b88:	6d a9       	ldd	r22, Y+53	; 0x35
    1b8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	cb 01       	movw	r24, r22
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	98 ab       	std	Y+48, r25	; 0x30
    1bae:	8f a7       	std	Y+47, r24	; 0x2f
    1bb0:	0f c0       	rjmp	.+30     	; 0x1bd0 <LCD_sendCommand+0xd2>
    1bb2:	88 ec       	ldi	r24, 0xC8	; 200
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	9e a7       	std	Y+46, r25	; 0x2e
    1bb8:	8d a7       	std	Y+45, r24	; 0x2d
    1bba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_sendCommand+0xc0>
    1bc2:	9e a7       	std	Y+46, r25	; 0x2e
    1bc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	98 ab       	std	Y+48, r25	; 0x30
    1bce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	69 f7       	brne	.-38     	; 0x1bb2 <LCD_sendCommand+0xb4>
    1bd8:	14 c0       	rjmp	.+40     	; 0x1c02 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	98 ab       	std	Y+48, r25	; 0x30
    1bec:	8f a7       	std	Y+47, r24	; 0x2f
    1bee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf2:	9c a7       	std	Y+44, r25	; 0x2c
    1bf4:	8b a7       	std	Y+43, r24	; 0x2b
    1bf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <LCD_sendCommand+0xfc>
    1bfe:	9c a7       	std	Y+44, r25	; 0x2c
    1c00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /*Delay for processing Tas = 50ns*/
	/*Enable LCD E = 1*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_HIGH);
    1c02:	83 e0       	ldi	r24, 0x03	; 3
    1c04:	67 e0       	ldi	r22, 0x07	; 7
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e8       	ldi	r26, 0x80	; 128
    1c12:	bf e3       	ldi	r27, 0x3F	; 63
    1c14:	8f a3       	std	Y+39, r24	; 0x27
    1c16:	98 a7       	std	Y+40, r25	; 0x28
    1c18:	a9 a7       	std	Y+41, r26	; 0x29
    1c1a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1c20:	89 a5       	ldd	r24, Y+41	; 0x29
    1c22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	4a ef       	ldi	r20, 0xFA	; 250
    1c2a:	54 e4       	ldi	r21, 0x44	; 68
    1c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	8b a3       	std	Y+35, r24	; 0x23
    1c36:	9c a3       	std	Y+36, r25	; 0x24
    1c38:	ad a3       	std	Y+37, r26	; 0x25
    1c3a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	40 e8       	ldi	r20, 0x80	; 128
    1c4a:	5f e3       	ldi	r21, 0x3F	; 63
    1c4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c50:	88 23       	and	r24, r24
    1c52:	2c f4       	brge	.+10     	; 0x1c5e <LCD_sendCommand+0x160>
		__ticks = 1;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	3f c0       	rjmp	.+126    	; 0x1cdc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c60:	7c a1       	ldd	r23, Y+36	; 0x24
    1c62:	8d a1       	ldd	r24, Y+37	; 0x25
    1c64:	9e a1       	ldd	r25, Y+38	; 0x26
    1c66:	20 e0       	ldi	r18, 0x00	; 0
    1c68:	3f ef       	ldi	r19, 0xFF	; 255
    1c6a:	4f e7       	ldi	r20, 0x7F	; 127
    1c6c:	57 e4       	ldi	r21, 0x47	; 71
    1c6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c72:	18 16       	cp	r1, r24
    1c74:	4c f5       	brge	.+82     	; 0x1cc8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e2       	ldi	r20, 0x20	; 32
    1c84:	51 e4       	ldi	r21, 0x41	; 65
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9a a3       	std	Y+34, r25	; 0x22
    1c9c:	89 a3       	std	Y+33, r24	; 0x21
    1c9e:	0f c0       	rjmp	.+30     	; 0x1cbe <LCD_sendCommand+0x1c0>
    1ca0:	88 ec       	ldi	r24, 0xC8	; 200
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	98 a3       	std	Y+32, r25	; 0x20
    1ca6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ca8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1caa:	98 a1       	ldd	r25, Y+32	; 0x20
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_sendCommand+0x1ae>
    1cb0:	98 a3       	std	Y+32, r25	; 0x20
    1cb2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	9a a3       	std	Y+34, r25	; 0x22
    1cbc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc0:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	69 f7       	brne	.-38     	; 0x1ca0 <LCD_sendCommand+0x1a2>
    1cc6:	14 c0       	rjmp	.+40     	; 0x1cf0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	9a a3       	std	Y+34, r25	; 0x22
    1cda:	89 a3       	std	Y+33, r24	; 0x21
    1cdc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cde:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f1 f7       	brne	.-4      	; 0x1ce8 <LCD_sendCommand+0x1ea>
    1cec:	9e 8f       	std	Y+30, r25	; 0x1e
    1cee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);/*Delay for processing Th = 13ns*/


#elif (LCD_DATA_BITS_MODE == 8)
	/*Send the required command on the data bus*/
	GPIO_writePort(LCD_DATA_BUS_PORT,command);
    1cf0:	82 e0       	ldi	r24, 0x02	; 2
    1cf2:	69 ad       	ldd	r22, Y+57	; 0x39
    1cf4:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_writePort>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e8       	ldi	r26, 0x80	; 128
    1cfe:	bf e3       	ldi	r27, 0x3F	; 63
    1d00:	89 8f       	std	Y+25, r24	; 0x19
    1d02:	9a 8f       	std	Y+26, r25	; 0x1a
    1d04:	ab 8f       	std	Y+27, r26	; 0x1b
    1d06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	69 8d       	ldd	r22, Y+25	; 0x19
    1d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a ef       	ldi	r20, 0xFA	; 250
    1d16:	54 e4       	ldi	r21, 0x44	; 68
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	8d 8b       	std	Y+21, r24	; 0x15
    1d22:	9e 8b       	std	Y+22, r25	; 0x16
    1d24:	af 8b       	std	Y+23, r26	; 0x17
    1d26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d28:	6d 89       	ldd	r22, Y+21	; 0x15
    1d2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 8b       	std	Y+20, r25	; 0x14
    1d46:	8b 8b       	std	Y+19, r24	; 0x13
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d50:	98 8d       	ldd	r25, Y+24	; 0x18
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	4c f5       	brge	.+82     	; 0x1db4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	69 8d       	ldd	r22, Y+25	; 0x19
    1d64:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d66:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d68:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9c 8b       	std	Y+20, r25	; 0x14
    1d88:	8b 8b       	std	Y+19, r24	; 0x13
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <LCD_sendCommand+0x2ac>
    1d8c:	88 ec       	ldi	r24, 0xC8	; 200
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9a 8b       	std	Y+18, r25	; 0x12
    1d92:	89 8b       	std	Y+17, r24	; 0x11
    1d94:	89 89       	ldd	r24, Y+17	; 0x11
    1d96:	9a 89       	ldd	r25, Y+18	; 0x12
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_sendCommand+0x29a>
    1d9c:	9a 8b       	std	Y+18, r25	; 0x12
    1d9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	8b 89       	ldd	r24, Y+19	; 0x13
    1da2:	9c 89       	ldd	r25, Y+20	; 0x14
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	8b 89       	ldd	r24, Y+19	; 0x13
    1dac:	9c 89       	ldd	r25, Y+20	; 0x14
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <LCD_sendCommand+0x28e>
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9c 8b       	std	Y+20, r25	; 0x14
    1dc6:	8b 8b       	std	Y+19, r24	; 0x13
    1dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dca:	9c 89       	ldd	r25, Y+20	; 0x14
    1dcc:	98 8b       	std	Y+16, r25	; 0x10
    1dce:	8f 87       	std	Y+15, r24	; 0x0f
    1dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd2:	98 89       	ldd	r25, Y+16	; 0x10
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_sendCommand+0x2d6>
    1dd8:	98 8b       	std	Y+16, r25	; 0x10
    1dda:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
	/*Disable LCD E = 0*/
	GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	67 e0       	ldi	r22, 0x07	; 7
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e8       	ldi	r26, 0x80	; 128
    1dec:	bf e3       	ldi	r27, 0x3F	; 63
    1dee:	8b 87       	std	Y+11, r24	; 0x0b
    1df0:	9c 87       	std	Y+12, r25	; 0x0c
    1df2:	ad 87       	std	Y+13, r26	; 0x0d
    1df4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	4a ef       	ldi	r20, 0xFA	; 250
    1e04:	54 e4       	ldi	r21, 0x44	; 68
    1e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	8f 83       	std	Y+7, r24	; 0x07
    1e10:	98 87       	std	Y+8, r25	; 0x08
    1e12:	a9 87       	std	Y+9, r26	; 0x09
    1e14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e16:	6f 81       	ldd	r22, Y+7	; 0x07
    1e18:	78 85       	ldd	r23, Y+8	; 0x08
    1e1a:	89 85       	ldd	r24, Y+9	; 0x09
    1e1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e8       	ldi	r20, 0x80	; 128
    1e24:	5f e3       	ldi	r21, 0x3F	; 63
    1e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	9e 83       	std	Y+6, r25	; 0x06
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	3f c0       	rjmp	.+126    	; 0x1eb6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e38:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3a:	78 85       	ldd	r23, Y+8	; 0x08
    1e3c:	89 85       	ldd	r24, Y+9	; 0x09
    1e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	4c f5       	brge	.+82     	; 0x1ea2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	bc 01       	movw	r22, r24
    1e6a:	cd 01       	movw	r24, r26
    1e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	0f c0       	rjmp	.+30     	; 0x1e98 <LCD_sendCommand+0x39a>
    1e7a:	88 ec       	ldi	r24, 0xC8	; 200
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_sendCommand+0x388>
    1e8a:	9c 83       	std	Y+4, r25	; 0x04
    1e8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e98:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	69 f7       	brne	.-38     	; 0x1e7a <LCD_sendCommand+0x37c>
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	9a 83       	std	Y+2, r25	; 0x02
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	f1 f7       	brne	.-4      	; 0x1ec2 <LCD_sendCommand+0x3c4>
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);/*Delay for processing Th = 13ns*/
#endif
}
    1eca:	e9 96       	adiw	r28, 0x39	; 57
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <LCD_displayCharacter>:

/*Display the required character on the LCD*/
void LCD_displayCharacter(uint8 character)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	e9 97       	sbiw	r28, 0x39	; 57
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	89 af       	std	Y+57, r24	; 0x39
	/*RS = 1 for sending command*/
		GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_HIGH);
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	66 e0       	ldi	r22, 0x06	; 6
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e8       	ldi	r26, 0x80	; 128
    1f02:	bf e3       	ldi	r27, 0x3F	; 63
    1f04:	8d ab       	std	Y+53, r24	; 0x35
    1f06:	9e ab       	std	Y+54, r25	; 0x36
    1f08:	af ab       	std	Y+55, r26	; 0x37
    1f0a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f10:	8f a9       	ldd	r24, Y+55	; 0x37
    1f12:	98 ad       	ldd	r25, Y+56	; 0x38
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	4a ef       	ldi	r20, 0xFA	; 250
    1f1a:	54 e4       	ldi	r21, 0x44	; 68
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	89 ab       	std	Y+49, r24	; 0x31
    1f26:	9a ab       	std	Y+50, r25	; 0x32
    1f28:	ab ab       	std	Y+51, r26	; 0x33
    1f2a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f30:	8b a9       	ldd	r24, Y+51	; 0x33
    1f32:	9c a9       	ldd	r25, Y+52	; 0x34
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 e8       	ldi	r20, 0x80	; 128
    1f3a:	5f e3       	ldi	r21, 0x3F	; 63
    1f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f40:	88 23       	and	r24, r24
    1f42:	2c f4       	brge	.+10     	; 0x1f4e <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	98 ab       	std	Y+48, r25	; 0x30
    1f4a:	8f a7       	std	Y+47, r24	; 0x2f
    1f4c:	3f c0       	rjmp	.+126    	; 0x1fcc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	4c f5       	brge	.+82     	; 0x1fb8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f66:	6d a9       	ldd	r22, Y+53	; 0x35
    1f68:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	bc 01       	movw	r22, r24
    1f80:	cd 01       	movw	r24, r26
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	98 ab       	std	Y+48, r25	; 0x30
    1f8c:	8f a7       	std	Y+47, r24	; 0x2f
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <LCD_displayCharacter+0xd2>
    1f90:	88 ec       	ldi	r24, 0xC8	; 200
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	9e a7       	std	Y+46, r25	; 0x2e
    1f96:	8d a7       	std	Y+45, r24	; 0x2d
    1f98:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f9a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_displayCharacter+0xc0>
    1fa0:	9e a7       	std	Y+46, r25	; 0x2e
    1fa2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	98 ab       	std	Y+48, r25	; 0x30
    1fac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fae:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	69 f7       	brne	.-38     	; 0x1f90 <LCD_displayCharacter+0xb4>
    1fb6:	14 c0       	rjmp	.+40     	; 0x1fe0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb8:	69 a9       	ldd	r22, Y+49	; 0x31
    1fba:	7a a9       	ldd	r23, Y+50	; 0x32
    1fbc:	8b a9       	ldd	r24, Y+51	; 0x33
    1fbe:	9c a9       	ldd	r25, Y+52	; 0x34
    1fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	98 ab       	std	Y+48, r25	; 0x30
    1fca:	8f a7       	std	Y+47, r24	; 0x2f
    1fcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fce:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd0:	9c a7       	std	Y+44, r25	; 0x2c
    1fd2:	8b a7       	std	Y+43, r24	; 0x2b
    1fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd8:	01 97       	sbiw	r24, 0x01	; 1
    1fda:	f1 f7       	brne	.-4      	; 0x1fd8 <LCD_displayCharacter+0xfc>
    1fdc:	9c a7       	std	Y+44, r25	; 0x2c
    1fde:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1); /*Delay for processing Tas = 50ns*/
		/*Enable LCD E = 1*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_HIGH);
    1fe0:	83 e0       	ldi	r24, 0x03	; 3
    1fe2:	67 e0       	ldi	r22, 0x07	; 7
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e8       	ldi	r26, 0x80	; 128
    1ff0:	bf e3       	ldi	r27, 0x3F	; 63
    1ff2:	8f a3       	std	Y+39, r24	; 0x27
    1ff4:	98 a7       	std	Y+40, r25	; 0x28
    1ff6:	a9 a7       	std	Y+41, r26	; 0x29
    1ff8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	6f a1       	ldd	r22, Y+39	; 0x27
    1ffc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ffe:	89 a5       	ldd	r24, Y+41	; 0x29
    2000:	9a a5       	ldd	r25, Y+42	; 0x2a
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	8b a3       	std	Y+35, r24	; 0x23
    2014:	9c a3       	std	Y+36, r25	; 0x24
    2016:	ad a3       	std	Y+37, r26	; 0x25
    2018:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    201a:	6b a1       	ldd	r22, Y+35	; 0x23
    201c:	7c a1       	ldd	r23, Y+36	; 0x24
    201e:	8d a1       	ldd	r24, Y+37	; 0x25
    2020:	9e a1       	ldd	r25, Y+38	; 0x26
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	2c f4       	brge	.+10     	; 0x203c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9a a3       	std	Y+34, r25	; 0x22
    2038:	89 a3       	std	Y+33, r24	; 0x21
    203a:	3f c0       	rjmp	.+126    	; 0x20ba <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    203c:	6b a1       	ldd	r22, Y+35	; 0x23
    203e:	7c a1       	ldd	r23, Y+36	; 0x24
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	3f ef       	ldi	r19, 0xFF	; 255
    2048:	4f e7       	ldi	r20, 0x7F	; 127
    204a:	57 e4       	ldi	r21, 0x47	; 71
    204c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2050:	18 16       	cp	r1, r24
    2052:	4c f5       	brge	.+82     	; 0x20a6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2054:	6f a1       	ldd	r22, Y+39	; 0x27
    2056:	78 a5       	ldd	r23, Y+40	; 0x28
    2058:	89 a5       	ldd	r24, Y+41	; 0x29
    205a:	9a a5       	ldd	r25, Y+42	; 0x2a
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e2       	ldi	r20, 0x20	; 32
    2062:	51 e4       	ldi	r21, 0x41	; 65
    2064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9a a3       	std	Y+34, r25	; 0x22
    207a:	89 a3       	std	Y+33, r24	; 0x21
    207c:	0f c0       	rjmp	.+30     	; 0x209c <LCD_displayCharacter+0x1c0>
    207e:	88 ec       	ldi	r24, 0xC8	; 200
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	98 a3       	std	Y+32, r25	; 0x20
    2084:	8f 8f       	std	Y+31, r24	; 0x1f
    2086:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2088:	98 a1       	ldd	r25, Y+32	; 0x20
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <LCD_displayCharacter+0x1ae>
    208e:	98 a3       	std	Y+32, r25	; 0x20
    2090:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2092:	89 a1       	ldd	r24, Y+33	; 0x21
    2094:	9a a1       	ldd	r25, Y+34	; 0x22
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	9a a3       	std	Y+34, r25	; 0x22
    209a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	89 a1       	ldd	r24, Y+33	; 0x21
    209e:	9a a1       	ldd	r25, Y+34	; 0x22
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	69 f7       	brne	.-38     	; 0x207e <LCD_displayCharacter+0x1a2>
    20a4:	14 c0       	rjmp	.+40     	; 0x20ce <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a6:	6b a1       	ldd	r22, Y+35	; 0x23
    20a8:	7c a1       	ldd	r23, Y+36	; 0x24
    20aa:	8d a1       	ldd	r24, Y+37	; 0x25
    20ac:	9e a1       	ldd	r25, Y+38	; 0x26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	89 a1       	ldd	r24, Y+33	; 0x21
    20bc:	9a a1       	ldd	r25, Y+34	; 0x22
    20be:	9e 8f       	std	Y+30, r25	; 0x1e
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
    20c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_displayCharacter+0x1ea>
    20ca:	9e 8f       	std	Y+30, r25	; 0x1e
    20cc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);/*Delay for processing Th = 13ns*/


	#elif (LCD_DATA_BITS_MODE == 8)
		/*Send the required command on the data bus*/
		GPIO_writePort(LCD_DATA_BUS_PORT,character);
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	69 ad       	ldd	r22, Y+57	; 0x39
    20d2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <GPIO_writePort>
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a0 e8       	ldi	r26, 0x80	; 128
    20dc:	bf e3       	ldi	r27, 0x3F	; 63
    20de:	89 8f       	std	Y+25, r24	; 0x19
    20e0:	9a 8f       	std	Y+26, r25	; 0x1a
    20e2:	ab 8f       	std	Y+27, r26	; 0x1b
    20e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e6:	69 8d       	ldd	r22, Y+25	; 0x19
    20e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4a ef       	ldi	r20, 0xFA	; 250
    20f4:	54 e4       	ldi	r21, 0x44	; 68
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	8d 8b       	std	Y+21, r24	; 0x15
    2100:	9e 8b       	std	Y+22, r25	; 0x16
    2102:	af 8b       	std	Y+23, r26	; 0x17
    2104:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e8       	ldi	r20, 0x80	; 128
    2114:	5f e3       	ldi	r21, 0x3F	; 63
    2116:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211a:	88 23       	and	r24, r24
    211c:	2c f4       	brge	.+10     	; 0x2128 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	9c 8b       	std	Y+20, r25	; 0x14
    2124:	8b 8b       	std	Y+19, r24	; 0x13
    2126:	3f c0       	rjmp	.+126    	; 0x21a6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	3f ef       	ldi	r19, 0xFF	; 255
    2134:	4f e7       	ldi	r20, 0x7F	; 127
    2136:	57 e4       	ldi	r21, 0x47	; 71
    2138:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213c:	18 16       	cp	r1, r24
    213e:	4c f5       	brge	.+82     	; 0x2192 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2140:	69 8d       	ldd	r22, Y+25	; 0x19
    2142:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2144:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2146:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e2       	ldi	r20, 0x20	; 32
    214e:	51 e4       	ldi	r21, 0x41	; 65
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	9c 8b       	std	Y+20, r25	; 0x14
    2166:	8b 8b       	std	Y+19, r24	; 0x13
    2168:	0f c0       	rjmp	.+30     	; 0x2188 <LCD_displayCharacter+0x2ac>
    216a:	88 ec       	ldi	r24, 0xC8	; 200
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9a 8b       	std	Y+18, r25	; 0x12
    2170:	89 8b       	std	Y+17, r24	; 0x11
    2172:	89 89       	ldd	r24, Y+17	; 0x11
    2174:	9a 89       	ldd	r25, Y+18	; 0x12
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_displayCharacter+0x29a>
    217a:	9a 8b       	std	Y+18, r25	; 0x12
    217c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217e:	8b 89       	ldd	r24, Y+19	; 0x13
    2180:	9c 89       	ldd	r25, Y+20	; 0x14
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	9c 8b       	std	Y+20, r25	; 0x14
    2186:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2188:	8b 89       	ldd	r24, Y+19	; 0x13
    218a:	9c 89       	ldd	r25, Y+20	; 0x14
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	69 f7       	brne	.-38     	; 0x216a <LCD_displayCharacter+0x28e>
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2192:	6d 89       	ldd	r22, Y+21	; 0x15
    2194:	7e 89       	ldd	r23, Y+22	; 0x16
    2196:	8f 89       	ldd	r24, Y+23	; 0x17
    2198:	98 8d       	ldd	r25, Y+24	; 0x18
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	9c 8b       	std	Y+20, r25	; 0x14
    21a4:	8b 8b       	std	Y+19, r24	; 0x13
    21a6:	8b 89       	ldd	r24, Y+19	; 0x13
    21a8:	9c 89       	ldd	r25, Y+20	; 0x14
    21aa:	98 8b       	std	Y+16, r25	; 0x10
    21ac:	8f 87       	std	Y+15, r24	; 0x0f
    21ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b0:	98 89       	ldd	r25, Y+16	; 0x10
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_displayCharacter+0x2d6>
    21b6:	98 8b       	std	Y+16, r25	; 0x10
    21b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1); /*Delay for processing Tdsw = 100ns*/
		/*Disable LCD E = 0*/
		GPIO_writePin(LCD_ENABLE_PORT,LCD_ENABLE_PIN,LOGIC_LOW);
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	67 e0       	ldi	r22, 0x07	; 7
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e8       	ldi	r26, 0x80	; 128
    21ca:	bf e3       	ldi	r27, 0x3F	; 63
    21cc:	8b 87       	std	Y+11, r24	; 0x0b
    21ce:	9c 87       	std	Y+12, r25	; 0x0c
    21d0:	ad 87       	std	Y+13, r26	; 0x0d
    21d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21da:	9e 85       	ldd	r25, Y+14	; 0x0e
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a ef       	ldi	r20, 0xFA	; 250
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8f 83       	std	Y+7, r24	; 0x07
    21ee:	98 87       	std	Y+8, r25	; 0x08
    21f0:	a9 87       	std	Y+9, r26	; 0x09
    21f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f4:	6f 81       	ldd	r22, Y+7	; 0x07
    21f6:	78 85       	ldd	r23, Y+8	; 0x08
    21f8:	89 85       	ldd	r24, Y+9	; 0x09
    21fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9e 83       	std	Y+6, r25	; 0x06
    2212:	8d 83       	std	Y+5, r24	; 0x05
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2230:	7c 85       	ldd	r23, Y+12	; 0x0c
    2232:	8d 85       	ldd	r24, Y+13	; 0x0d
    2234:	9e 85       	ldd	r25, Y+14	; 0x0e
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <LCD_displayCharacter+0x39a>
    2258:	88 ec       	ldi	r24, 0xC8	; 200
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9c 83       	std	Y+4, r25	; 0x04
    225e:	8b 83       	std	Y+3, r24	; 0x03
    2260:	8b 81       	ldd	r24, Y+3	; 0x03
    2262:	9c 81       	ldd	r25, Y+4	; 0x04
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_displayCharacter+0x388>
    2268:	9c 83       	std	Y+4, r25	; 0x04
    226a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	9e 81       	ldd	r25, Y+6	; 0x06
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9e 83       	std	Y+6, r25	; 0x06
    2274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	9e 81       	ldd	r25, Y+6	; 0x06
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <LCD_displayCharacter+0x37c>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6f 81       	ldd	r22, Y+7	; 0x07
    2282:	78 85       	ldd	r23, Y+8	; 0x08
    2284:	89 85       	ldd	r24, Y+9	; 0x09
    2286:	9a 85       	ldd	r25, Y+10	; 0x0a
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9e 83       	std	Y+6, r25	; 0x06
    2292:	8d 83       	std	Y+5, r24	; 0x05
    2294:	8d 81       	ldd	r24, Y+5	; 0x05
    2296:	9e 81       	ldd	r25, Y+6	; 0x06
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	9a 81       	ldd	r25, Y+2	; 0x02
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_displayCharacter+0x3c4>
    22a4:	9a 83       	std	Y+2, r25	; 0x02
    22a6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);/*Delay for processing Th = 13ns*/
	#endif
}
    22a8:	e9 96       	adiw	r28, 0x39	; 57
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <LCD_displayString>:

/*Display the required string on the lCD*/
void LCD_displayString(const char* string)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <LCD_displayString+0x6>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
    22c8:	0a c0       	rjmp	.+20     	; 0x22de <LCD_displayString+0x24>
	while(*(string) != '\0')
	{
		LCD_displayCharacter(*string);
    22ca:	e9 81       	ldd	r30, Y+1	; 0x01
    22cc:	fa 81       	ldd	r31, Y+2	; 0x02
    22ce:	80 81       	ld	r24, Z
    22d0:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_displayCharacter>
		string++;
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	9a 81       	ldd	r25, Y+2	; 0x02
    22d8:	01 96       	adiw	r24, 0x01	; 1
    22da:	9a 83       	std	Y+2, r25	; 0x02
    22dc:	89 83       	std	Y+1, r24	; 0x01
}

/*Display the required string on the lCD*/
void LCD_displayString(const char* string)
{
	while(*(string) != '\0')
    22de:	e9 81       	ldd	r30, Y+1	; 0x01
    22e0:	fa 81       	ldd	r31, Y+2	; 0x02
    22e2:	80 81       	ld	r24, Z
    22e4:	88 23       	and	r24, r24
    22e6:	89 f7       	brne	.-30     	; 0x22ca <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*string);
		string++;
	}
}
    22e8:	0f 90       	pop	r0
    22ea:	0f 90       	pop	r0
    22ec:	cf 91       	pop	r28
    22ee:	df 91       	pop	r29
    22f0:	08 95       	ret

000022f2 <LCD_moveCursor>:

/*Move the cursor to a specified row and column on the LCD*/
void LCD_moveCursor(uint8 row,uint8 column)
{
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <LCD_moveCursor+0x6>
    22f8:	00 d0       	rcall	.+0      	; 0x22fa <LCD_moveCursor+0x8>
    22fa:	0f 92       	push	r0
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	8a 83       	std	Y+2, r24	; 0x02
    2302:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	/*Calculate the required address in the LCD DDRAM*/
	switch(row)
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	3d 83       	std	Y+5, r19	; 0x05
    230c:	2c 83       	std	Y+4, r18	; 0x04
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	c1 f0       	breq	.+48     	; 0x2348 <LCD_moveCursor+0x56>
    2318:	2c 81       	ldd	r18, Y+4	; 0x04
    231a:	3d 81       	ldd	r19, Y+5	; 0x05
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	2c f4       	brge	.+10     	; 0x232c <LCD_moveCursor+0x3a>
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	61 f0       	breq	.+24     	; 0x2342 <LCD_moveCursor+0x50>
    232a:	19 c0       	rjmp	.+50     	; 0x235e <LCD_moveCursor+0x6c>
    232c:	2c 81       	ldd	r18, Y+4	; 0x04
    232e:	3d 81       	ldd	r19, Y+5	; 0x05
    2330:	22 30       	cpi	r18, 0x02	; 2
    2332:	31 05       	cpc	r19, r1
    2334:	69 f0       	breq	.+26     	; 0x2350 <LCD_moveCursor+0x5e>
    2336:	8c 81       	ldd	r24, Y+4	; 0x04
    2338:	9d 81       	ldd	r25, Y+5	; 0x05
    233a:	83 30       	cpi	r24, 0x03	; 3
    233c:	91 05       	cpc	r25, r1
    233e:	61 f0       	breq	.+24     	; 0x2358 <LCD_moveCursor+0x66>
    2340:	0e c0       	rjmp	.+28     	; 0x235e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address = column;
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	0b c0       	rjmp	.+22     	; 0x235e <LCD_moveCursor+0x6c>
			break;
		case 1:
			lcd_memory_address = column + 0x40;
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	80 5c       	subi	r24, 0xC0	; 192
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	07 c0       	rjmp	.+14     	; 0x235e <LCD_moveCursor+0x6c>
			break;
		case 2:
			lcd_memory_address = column + 0x10;
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	80 5f       	subi	r24, 0xF0	; 240
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	03 c0       	rjmp	.+6      	; 0x235e <LCD_moveCursor+0x6c>
			break;
		case 3:
			lcd_memory_address = column + 0x50;
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	80 5b       	subi	r24, 0xB0	; 176
    235c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/*Move the LCD cursor to the calculated address*/
	LCD_sendCommand(lcd_memory_address | LCD_MOVE_CURSOR_TO_FIRST_LINE);
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	80 68       	ori	r24, 0x80	; 128
    2362:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_sendCommand>
}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <LCD_displayStringRowColumn>:

/*Display the required string in specified position on teh LCD*/
void LCD_displayStringRowColumn(uint8 row,uint8 column,const char* string)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	00 d0       	rcall	.+0      	; 0x237c <LCD_displayStringRowColumn+0x6>
    237c:	00 d0       	rcall	.+0      	; 0x237e <LCD_displayStringRowColumn+0x8>
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	6a 83       	std	Y+2, r22	; 0x02
    2386:	5c 83       	std	Y+4, r21	; 0x04
    2388:	4b 83       	std	Y+3, r20	; 0x03
	/*Go to the required LCD position*/
	LCD_moveCursor(row,column);
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	6a 81       	ldd	r22, Y+2	; 0x02
    238e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_moveCursor>
	/*Display the string*/
	LCD_displayString(string);
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_displayString>
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <LCD_integerToString>:

/*Display the required decimal value to the screen*/
void LCD_integerToString(int data)
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	62 97       	sbiw	r28, 0x12	; 18
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	f8 94       	cli
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	0f be       	out	0x3f, r0	; 63
    23ba:	cd bf       	out	0x3d, r28	; 61
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /*array to hold the ASCII result of each number*/
	itoa(data,buff,10); /*itoa c function to convert the integer data to corresponding ASCII vale, 10 --> base 10 for decimal*/
    23c0:	89 89       	ldd	r24, Y+17	; 0x11
    23c2:	9a 89       	ldd	r25, Y+18	; 0x12
    23c4:	9e 01       	movw	r18, r28
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	b9 01       	movw	r22, r18
    23cc:	4a e0       	ldi	r20, 0x0A	; 10
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <itoa>
	LCD_displayString(buff);
    23d4:	ce 01       	movw	r24, r28
    23d6:	01 96       	adiw	r24, 0x01	; 1
    23d8:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_displayString>
}
    23dc:	62 96       	adiw	r28, 0x12	; 18
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <LCD_clearScreen>:

/*Send the command that clears the display screen*/
void LCD_clearScreen(void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <LCD_sendCommand>
}
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <main>:
Timer1_ConfigType Timer1_Configurations = {0,7812,CLK_1024, COMPARE_A_MODE};


                                                   /*MAIN*/
int main (void)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	6a 97       	sbiw	r28, 0x1a	; 26
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
	SREG.bits.I_BIT = 1; /*enable the global interrupts*/
    2416:	ef e5       	ldi	r30, 0x5F	; 95
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	80 68       	ori	r24, 0x80	; 128
    241e:	80 83       	st	Z, r24
	LCD_init(); /*Initialize the LCD Driver*/
    2420:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LCD_init>

	Timer1_setCallBack(countTimerTicks); /*set the callback function of the timer*/
    2424:	88 e9       	ldi	r24, 0x98	; 152
    2426:	97 e1       	ldi	r25, 0x17	; 23
    2428:	0e 94 d6 09 	call	0x13ac	; 0x13ac <Timer1_setCallBack>

	/*UART Configuration with Baud rate = 9600, eight bits data, disabling parity and one stop bit*/
	UART_ConfigType UART_Configurations = {9600,EIGHT_BITS,DISABLE,ONE_BIT};
    242c:	ce 01       	movw	r24, r28
    242e:	0f 96       	adiw	r24, 0x0f	; 15
    2430:	9f 8b       	std	Y+23, r25	; 0x17
    2432:	8e 8b       	std	Y+22, r24	; 0x16
    2434:	ec e0       	ldi	r30, 0x0C	; 12
    2436:	f1 e0       	ldi	r31, 0x01	; 1
    2438:	f9 8f       	std	Y+25, r31	; 0x19
    243a:	e8 8f       	std	Y+24, r30	; 0x18
    243c:	f7 e0       	ldi	r31, 0x07	; 7
    243e:	fa 8f       	std	Y+26, r31	; 0x1a
    2440:	e8 8d       	ldd	r30, Y+24	; 0x18
    2442:	f9 8d       	ldd	r31, Y+25	; 0x19
    2444:	00 80       	ld	r0, Z
    2446:	88 8d       	ldd	r24, Y+24	; 0x18
    2448:	99 8d       	ldd	r25, Y+25	; 0x19
    244a:	01 96       	adiw	r24, 0x01	; 1
    244c:	99 8f       	std	Y+25, r25	; 0x19
    244e:	88 8f       	std	Y+24, r24	; 0x18
    2450:	ee 89       	ldd	r30, Y+22	; 0x16
    2452:	ff 89       	ldd	r31, Y+23	; 0x17
    2454:	00 82       	st	Z, r0
    2456:	8e 89       	ldd	r24, Y+22	; 0x16
    2458:	9f 89       	ldd	r25, Y+23	; 0x17
    245a:	01 96       	adiw	r24, 0x01	; 1
    245c:	9f 8b       	std	Y+23, r25	; 0x17
    245e:	8e 8b       	std	Y+22, r24	; 0x16
    2460:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2462:	91 50       	subi	r25, 0x01	; 1
    2464:	9a 8f       	std	Y+26, r25	; 0x1a
    2466:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2468:	ee 23       	and	r30, r30
    246a:	51 f7       	brne	.-44     	; 0x2440 <main+0x3e>
	UART_init(&UART_Configurations); /*Initialize the UART Driver with the required configuration*/
    246c:	ce 01       	movw	r24, r28
    246e:	0f 96       	adiw	r24, 0x0f	; 15
    2470:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <UART_init>
	/*Super Loop*/
	while(1)
	{
		/*Check if it is the first time to create the password or the password already was created and stored thus we need the menu*/
		/*if the password is set earlier or the program is resetted after 1 min of alarm then we need to loop back into the menu options*/
		if(passwordIsSet && reset == TRUE)
    2474:	80 91 17 01 	lds	r24, 0x0117
    2478:	88 23       	and	r24, r24
    247a:	39 f0       	breq	.+14     	; 0x248a <main+0x88>
    247c:	80 91 18 01 	lds	r24, 0x0118
    2480:	81 30       	cpi	r24, 0x01	; 1
    2482:	19 f4       	brne	.+6      	; 0x248a <main+0x88>
		{
			MenuOptions(); /*call the function that displays the menu and choose what needed action from it*/
    2484:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <MenuOptions>
    2488:	1b c0       	rjmp	.+54     	; 0x24c0 <main+0xbe>
		}
		else
		{
			/*if the password is not set then we nead to create password first*/
			creatingPassword();
    248a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <creatingPassword>

			/*check the 2 entered passwords if they match or not*/
			passwordsMatchingStatus = UART_receiveByte();
    248e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    2492:	80 93 16 01 	sts	0x0116, r24
			if(passwordsMatchingStatus == MC2_PASSWORDS_MATCH)
    2496:	80 91 16 01 	lds	r24, 0x0116
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	31 f4       	brne	.+12     	; 0x24aa <main+0xa8>
			{
				/*if the 2 passwords are the same then set the flag to 1 and call the menu function*/
				passwordIsSet = TRUE;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	80 93 17 01 	sts	0x0117, r24
				MenuOptions();
    24a4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <MenuOptions>
    24a8:	0b c0       	rjmp	.+22     	; 0x24c0 <main+0xbe>
			}
			else
			{
				/*if the 2 passwords are not the same then we will set the flag to 0 in order to create passsword again*/
				passwordIsSet = FALSE;
    24aa:	10 92 17 01 	sts	0x0117, r1
				LCD_clearScreen();
    24ae:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>
				LCD_displayStringRowColumn(0,1,"Pass not match");
    24b2:	20 e6       	ldi	r18, 0x60	; 96
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	61 e0       	ldi	r22, 0x01	; 1
    24ba:	a9 01       	movw	r20, r18
    24bc:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	aa e7       	ldi	r26, 0x7A	; 122
    24c6:	b4 e4       	ldi	r27, 0x44	; 68
    24c8:	8b 87       	std	Y+11, r24	; 0x0b
    24ca:	9c 87       	std	Y+12, r25	; 0x0c
    24cc:	ad 87       	std	Y+13, r26	; 0x0d
    24ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a ef       	ldi	r20, 0xFA	; 250
    24de:	54 e4       	ldi	r21, 0x44	; 68
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	8f 83       	std	Y+7, r24	; 0x07
    24ea:	98 87       	std	Y+8, r25	; 0x08
    24ec:	a9 87       	std	Y+9, r26	; 0x09
    24ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <main+0x110>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <main+0x18e>
	else if (__tmp > 65535)
    2512:	6f 81       	ldd	r22, Y+7	; 0x07
    2514:	78 85       	ldd	r23, Y+8	; 0x08
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <main+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6b 85       	ldd	r22, Y+11	; 0x0b
    252c:	7c 85       	ldd	r23, Y+12	; 0x0c
    252e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2530:	9e 85       	ldd	r25, Y+14	; 0x0e
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <main+0x170>
    2554:	88 ec       	ldi	r24, 0xC8	; 200
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	8b 83       	std	Y+3, r24	; 0x03
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <main+0x15e>
    2564:	9c 83       	std	Y+4, r25	; 0x04
    2566:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8d 81       	ldd	r24, Y+5	; 0x05
    256a:	9e 81       	ldd	r25, Y+6	; 0x06
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	9e 83       	std	Y+6, r25	; 0x06
    2570:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <main+0x152>
    257a:	7c cf       	rjmp	.-264    	; 0x2474 <main+0x72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	9e 83       	std	Y+6, r25	; 0x06
    258e:	8d 83       	std	Y+5, r24	; 0x05
    2590:	8d 81       	ldd	r24, Y+5	; 0x05
    2592:	9e 81       	ldd	r25, Y+6	; 0x06
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <main+0x19a>
    25a0:	9a 83       	std	Y+2, r25	; 0x02
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	67 cf       	rjmp	.-306    	; 0x2474 <main+0x72>

000025a6 <creatingPassword>:

                                                 /*Functions Protoypes*/

/*Function to create password by taking 2 values from the user and sending them to the control ECU to check their equality*/
void creatingPassword(void)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
	/*take the 2 passwords from teh user*/
	passwordEntering(firstPasswordEntry,MC1_FIRST_PASSWORD);
    25ae:	8f e1       	ldi	r24, 0x1F	; 31
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	62 e0       	ldi	r22, 0x02	; 2
    25b4:	0e 94 51 14 	call	0x28a2	; 0x28a2 <passwordEntering>
	passwordEntering(secondPasswordEntry,MC1_SECOND_PASSWORD);
    25b8:	8a e1       	ldi	r24, 0x1A	; 26
    25ba:	91 e0       	ldi	r25, 0x01	; 1
    25bc:	63 e0       	ldi	r22, 0x03	; 3
    25be:	0e 94 51 14 	call	0x28a2	; 0x28a2 <passwordEntering>

	/*check that control ECU is ready to receive data from the hmi ECU*/
	UART_sendByte(MC1_READY);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
	while(UART_receiveByte()!= MC2_READY);
    25c8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    25cc:	81 30       	cpi	r24, 0x01	; 1
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <creatingPassword+0x22>

	/*send first pass to the control ECU through the UART*/
	UART_sendByte(MC1_FIRST_PASSWORD);
    25d0:	82 e0       	ldi	r24, 0x02	; 2
    25d2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
	sendPassword(firstPasswordEntry);
    25d6:	8f e1       	ldi	r24, 0x1F	; 31
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <sendPassword>

	/*send second pass to the control ECU through the UART*/
	UART_sendByte(MC1_SECOND_PASSWORD);
    25de:	83 e0       	ldi	r24, 0x03	; 3
    25e0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
	sendPassword(secondPasswordEntry);
    25e4:	8a e1       	ldi	r24, 0x1A	; 26
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <sendPassword>
}
    25ec:	cf 91       	pop	r28
    25ee:	df 91       	pop	r29
    25f0:	08 95       	ret

000025f2 <MenuOptions>:


/*Function to diplay the menu options and choose from it what to do*/
void MenuOptions(void)
{
    25f2:	df 93       	push	r29
    25f4:	cf 93       	push	r28
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	62 97       	sbiw	r28, 0x12	; 18
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
	uint8 userChoice, passswordEntryNumbers = 0;
    2606:	1f 86       	std	Y+15, r1	; 0x0f
	passwordsMatchingStatus = 0;
    2608:	10 92 16 01 	sts	0x0116, r1

	LCD_clearScreen();
    260c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
    2610:	2f e6       	ldi	r18, 0x6F	; 111
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	60 e0       	ldi	r22, 0x00	; 0
    2618:	a9 01       	movw	r20, r18
    261a:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
    261e:	2d e7       	ldi	r18, 0x7D	; 125
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	a9 01       	movw	r20, r18
    2628:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>

	passwordsMatchingStatus = 0;
    262c:	10 92 16 01 	sts	0x0116, r1
	userChoice = KEYPAD_getPressedKey(); /*get the choice from the user*/
    2630:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <KEYPAD_getPressedKey>
    2634:	88 8b       	std	Y+16, r24	; 0x10
    2636:	27 c1       	rjmp	.+590    	; 0x2886 <MenuOptions+0x294>

	/*The only condition to leave the loop is that passwords are matched if any choice is chosen and password is entered*/
	while(passwordsMatchingStatus != MC2_PASSWORDS_MATCH)
	{
		passswordEntryNumbers++;
    2638:	8f 85       	ldd	r24, Y+15	; 0x0f
    263a:	8f 5f       	subi	r24, 0xFF	; 255
    263c:	8f 87       	std	Y+15, r24	; 0x0f
		switch(userChoice)
    263e:	88 89       	ldd	r24, Y+16	; 0x10
    2640:	28 2f       	mov	r18, r24
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	3a 8b       	std	Y+18, r19	; 0x12
    2646:	29 8b       	std	Y+17, r18	; 0x11
    2648:	89 89       	ldd	r24, Y+17	; 0x11
    264a:	9a 89       	ldd	r25, Y+18	; 0x12
    264c:	8b 32       	cpi	r24, 0x2B	; 43
    264e:	91 05       	cpc	r25, r1
    2650:	39 f0       	breq	.+14     	; 0x2660 <MenuOptions+0x6e>
    2652:	29 89       	ldd	r18, Y+17	; 0x11
    2654:	3a 89       	ldd	r19, Y+18	; 0x12
    2656:	2d 32       	cpi	r18, 0x2D	; 45
    2658:	31 05       	cpc	r19, r1
    265a:	09 f4       	brne	.+2      	; 0x265e <MenuOptions+0x6c>
    265c:	56 c0       	rjmp	.+172    	; 0x270a <MenuOptions+0x118>
    265e:	7e c0       	rjmp	.+252    	; 0x275c <MenuOptions+0x16a>
		{
			case '+':
			{
				UART_sendByte(MC1_OPEN_DOOR); /*notifying the control ECU which choice the user wants*/
    2660:	85 e0       	ldi	r24, 0x05	; 5
    2662:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
				passwordEntering(firstPasswordEntry,MC1_FIRST_PASSWORD); /*taking the password from the user*/
    2666:	8f e1       	ldi	r24, 0x1F	; 31
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	62 e0       	ldi	r22, 0x02	; 2
    266c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <passwordEntering>
				UART_sendByte(MC1_FIRST_PASSWORD);
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
				sendPassword(firstPasswordEntry);  /*sending the password to be checked*/
    2676:	8f e1       	ldi	r24, 0x1F	; 31
    2678:	91 e0       	ldi	r25, 0x01	; 1
    267a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <sendPassword>
				passwordsMatchingStatus = UART_receiveByte(); /*check if the passwords are matched or not*/
    267e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    2682:	80 93 16 01 	sts	0x0116, r24
				/*if the passwords are matched Door will be unlocked and then locked again*/
				/*if the passwords are not matched he will try again for 3 times*/
				if(passwordsMatchingStatus == MC2_PASSWORDS_MATCH)
    2686:	80 91 16 01 	lds	r24, 0x0116
    268a:	83 30       	cpi	r24, 0x03	; 3
    268c:	09 f0       	breq	.+2      	; 0x2690 <MenuOptions+0x9e>
    268e:	66 c0       	rjmp	.+204    	; 0x275c <MenuOptions+0x16a>
				{
					while(UART_receiveByte() != MC2_DOOR_UNLOCKING);
    2690:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    2694:	88 30       	cpi	r24, 0x08	; 8
    2696:	e1 f7       	brne	.-8      	; 0x2690 <MenuOptions+0x9e>
					Timer1_init(&Timer1_Configurations);
    2698:	86 e0       	ldi	r24, 0x06	; 6
    269a:	91 e0       	ldi	r25, 0x01	; 1
    269c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Timer1_init>
					LCD_clearScreen();
    26a0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>
					LCD_displayStringRowColumn(0,1,"Door Unlocking");
    26a4:	2d e8       	ldi	r18, 0x8D	; 141
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	61 e0       	ldi	r22, 0x01	; 1
    26ac:	a9 01       	movw	r20, r18
    26ae:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
					while(timerTicks != 18);
    26b2:	80 91 19 01 	lds	r24, 0x0119
    26b6:	82 31       	cpi	r24, 0x12	; 18
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <MenuOptions+0xc0>
					Timer1_deInit();
    26ba:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer1_deInit>
					timerTicks = 0;
    26be:	10 92 19 01 	sts	0x0119, r1

					while(UART_receiveByte() != MC2_DOOR_LOCKING);
    26c2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    26c6:	89 30       	cpi	r24, 0x09	; 9
    26c8:	e1 f7       	brne	.-8      	; 0x26c2 <MenuOptions+0xd0>
					Timer1_init(&Timer1_Configurations);
    26ca:	86 e0       	ldi	r24, 0x06	; 6
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Timer1_init>
					LCD_clearScreen();
    26d2:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>
					LCD_displayStringRowColumn(0,2,"Door Locking");
    26d6:	2c e9       	ldi	r18, 0x9C	; 156
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	62 e0       	ldi	r22, 0x02	; 2
    26de:	a9 01       	movw	r20, r18
    26e0:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
					while(timerTicks != 15);
    26e4:	80 91 19 01 	lds	r24, 0x0119
    26e8:	8f 30       	cpi	r24, 0x0F	; 15
    26ea:	e1 f7       	brne	.-8      	; 0x26e4 <MenuOptions+0xf2>
					Timer1_deInit();
    26ec:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer1_deInit>
					timerTicks = 0;
    26f0:	10 92 19 01 	sts	0x0119, r1

					/*for showing the menu option again on resetting the program after locking back the door*/
					passwordIsSet = TRUE;
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	80 93 17 01 	sts	0x0117, r24
					while(UART_receiveByte() != MC2_RESET_PROGRAM);
    26fa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    26fe:	80 31       	cpi	r24, 0x10	; 16
    2700:	e1 f7       	brne	.-8      	; 0x26fa <MenuOptions+0x108>
					reset = TRUE;
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	80 93 18 01 	sts	0x0118, r24
    2708:	29 c0       	rjmp	.+82     	; 0x275c <MenuOptions+0x16a>
				}
				break;
			}
			case '-':
			{
				UART_sendByte(MC1_CHANGE_PASSWORD); /*notifying the control ECU which choice the user wants*/
    270a:	86 e0       	ldi	r24, 0x06	; 6
    270c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
				passwordEntering(firstPasswordEntry,MC1_FIRST_PASSWORD); /*taking the password from the user*/
    2710:	8f e1       	ldi	r24, 0x1F	; 31
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	62 e0       	ldi	r22, 0x02	; 2
    2716:	0e 94 51 14 	call	0x28a2	; 0x28a2 <passwordEntering>
				UART_sendByte(MC1_FIRST_PASSWORD);
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
				sendPassword(firstPasswordEntry); /*sending the password to be checked*/
    2720:	8f e1       	ldi	r24, 0x1F	; 31
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <sendPassword>
				passwordsMatchingStatus = UART_receiveByte(); /*check if the passwords are matched or not*/
    2728:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    272c:	80 93 16 01 	sts	0x0116, r24
				/*if the passwords are matched user can change password*/
				/*if the passwords are not matched he will try again for 3 times*/
				if(passwordsMatchingStatus == MC2_PASSWORDS_MATCH)
    2730:	80 91 16 01 	lds	r24, 0x0116
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	91 f4       	brne	.+36     	; 0x275c <MenuOptions+0x16a>
				{
					LCD_clearScreen();
    2738:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Passwords match");
    273c:	29 ea       	ldi	r18, 0xA9	; 169
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	a9 01       	movw	r20, r18
    2746:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,2,"Change Pass");
    274a:	29 eb       	ldi	r18, 0xB9	; 185
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	62 e0       	ldi	r22, 0x02	; 2
    2752:	a9 01       	movw	r20, r18
    2754:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
					passwordIsSet = FALSE; /*in order to create new password and leave the menu options*/
    2758:	10 92 17 01 	sts	0x0117, r1
			default:
				break;
		}

		/*On exceeding 3 times of entering wrong password after choosing any of + or -*/
		if(passswordEntryNumbers == 3)
    275c:	8f 85       	ldd	r24, Y+15	; 0x0f
    275e:	83 30       	cpi	r24, 0x03	; 3
    2760:	01 f5       	brne	.+64     	; 0x27a2 <MenuOptions+0x1b0>
		{
			UART_sendByte(MC1_SET_ALARM); /*Notify the Control ECU to set the alarm mode on*/
    2762:	87 e0       	ldi	r24, 0x07	; 7
    2764:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
			LCD_clearScreen();
    2768:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 6,"ERORR");
    276c:	25 ec       	ldi	r18, 0xC5	; 197
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	66 e0       	ldi	r22, 0x06	; 6
    2774:	a9 01       	movw	r20, r18
    2776:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
			Timer1_init(&Timer1_Configurations);
    277a:	86 e0       	ldi	r24, 0x06	; 6
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <Timer1_init>
			while(timerTicks != 60);
    2782:	80 91 19 01 	lds	r24, 0x0119
    2786:	8c 33       	cpi	r24, 0x3C	; 60
    2788:	e1 f7       	brne	.-8      	; 0x2782 <MenuOptions+0x190>
			Timer1_deInit();
    278a:	0e 94 c8 09 	call	0x1390	; 0x1390 <Timer1_deInit>
			timerTicks = 0;
    278e:	10 92 19 01 	sts	0x0119, r1
			while(UART_receiveByte() != MC2_RESET_PROGRAM); /*wait for the control unit to reset the program*/
    2792:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <UART_receiveByte>
    2796:	80 31       	cpi	r24, 0x10	; 16
    2798:	e1 f7       	brne	.-8      	; 0x2792 <MenuOptions+0x1a0>
			reset = TRUE; /*to start again from the menu option*/
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	80 93 18 01 	sts	0x0118, r24
    27a0:	77 c0       	rjmp	.+238    	; 0x2890 <MenuOptions+0x29e>
			break;
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	a6 e9       	ldi	r26, 0x96	; 150
    27a8:	b3 e4       	ldi	r27, 0x43	; 67
    27aa:	8b 87       	std	Y+11, r24	; 0x0b
    27ac:	9c 87       	std	Y+12, r25	; 0x0c
    27ae:	ad 87       	std	Y+13, r26	; 0x0d
    27b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	4a ef       	ldi	r20, 0xFA	; 250
    27c0:	54 e4       	ldi	r21, 0x44	; 68
    27c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	8f 83       	std	Y+7, r24	; 0x07
    27cc:	98 87       	std	Y+8, r25	; 0x08
    27ce:	a9 87       	std	Y+9, r26	; 0x09
    27d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d2:	6f 81       	ldd	r22, Y+7	; 0x07
    27d4:	78 85       	ldd	r23, Y+8	; 0x08
    27d6:	89 85       	ldd	r24, Y+9	; 0x09
    27d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e8       	ldi	r20, 0x80	; 128
    27e0:	5f e3       	ldi	r21, 0x3F	; 63
    27e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e6:	88 23       	and	r24, r24
    27e8:	2c f4       	brge	.+10     	; 0x27f4 <MenuOptions+0x202>
		__ticks = 1;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	9e 83       	std	Y+6, r25	; 0x06
    27f0:	8d 83       	std	Y+5, r24	; 0x05
    27f2:	3f c0       	rjmp	.+126    	; 0x2872 <MenuOptions+0x280>
	else if (__tmp > 65535)
    27f4:	6f 81       	ldd	r22, Y+7	; 0x07
    27f6:	78 85       	ldd	r23, Y+8	; 0x08
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	3f ef       	ldi	r19, 0xFF	; 255
    2800:	4f e7       	ldi	r20, 0x7F	; 127
    2802:	57 e4       	ldi	r21, 0x47	; 71
    2804:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2808:	18 16       	cp	r1, r24
    280a:	4c f5       	brge	.+82     	; 0x285e <MenuOptions+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280c:	6b 85       	ldd	r22, Y+11	; 0x0b
    280e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2810:	8d 85       	ldd	r24, Y+13	; 0x0d
    2812:	9e 85       	ldd	r25, Y+14	; 0x0e
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	40 e2       	ldi	r20, 0x20	; 32
    281a:	51 e4       	ldi	r21, 0x41	; 65
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	0f c0       	rjmp	.+30     	; 0x2854 <MenuOptions+0x262>
    2836:	88 ec       	ldi	r24, 0xC8	; 200
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	f1 f7       	brne	.-4      	; 0x2842 <MenuOptions+0x250>
    2846:	9c 83       	std	Y+4, r25	; 0x04
    2848:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	9e 81       	ldd	r25, Y+6	; 0x06
    284e:	01 97       	sbiw	r24, 0x01	; 1
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	69 f7       	brne	.-38     	; 0x2836 <MenuOptions+0x244>
    285c:	14 c0       	rjmp	.+40     	; 0x2886 <MenuOptions+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    285e:	6f 81       	ldd	r22, Y+7	; 0x07
    2860:	78 85       	ldd	r23, Y+8	; 0x08
    2862:	89 85       	ldd	r24, Y+9	; 0x09
    2864:	9a 85       	ldd	r25, Y+10	; 0x0a
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <MenuOptions+0x28c>
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01

	passwordsMatchingStatus = 0;
	userChoice = KEYPAD_getPressedKey(); /*get the choice from the user*/

	/*The only condition to leave the loop is that passwords are matched if any choice is chosen and password is entered*/
	while(passwordsMatchingStatus != MC2_PASSWORDS_MATCH)
    2886:	80 91 16 01 	lds	r24, 0x0116
    288a:	83 30       	cpi	r24, 0x03	; 3
    288c:	09 f0       	breq	.+2      	; 0x2890 <MenuOptions+0x29e>
    288e:	d4 ce       	rjmp	.-600    	; 0x2638 <MenuOptions+0x46>
			reset = TRUE; /*to start again from the menu option*/
			break;
		}
		_delay_ms(300); /*delay before resetting the program*/
	}
}
    2890:	62 96       	adiw	r28, 0x12	; 18
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <passwordEntering>:

/*Function to take the user input and store it in password array*/
void passwordEntering(uint8* password, uint8 firstOrSecond)
{
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	ec 97       	sbiw	r28, 0x3c	; 60
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	9b af       	std	Y+59, r25	; 0x3b
    28bc:	8a af       	std	Y+58, r24	; 0x3a
    28be:	6c af       	std	Y+60, r22	; 0x3c
	uint8 i = 0;
    28c0:	19 ae       	std	Y+57, r1	; 0x39
	LCD_clearScreen();
    28c2:	0e 94 f7 11 	call	0x23ee	; 0x23ee <LCD_clearScreen>

	if(firstOrSecond == MC1_FIRST_PASSWORD)
    28c6:	8c ad       	ldd	r24, Y+60	; 0x3c
    28c8:	82 30       	cpi	r24, 0x02	; 2
    28ca:	09 f0       	breq	.+2      	; 0x28ce <passwordEntering+0x2c>
    28cc:	3b c1       	rjmp	.+630    	; 0x2b44 <passwordEntering+0x2a2>
	{
		LCD_displayString("Plz Enter Pass:");
    28ce:	8b ec       	ldi	r24, 0xCB	; 203
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_displayString>
		for(i = 0; i < 5; i++)
    28d6:	19 ae       	std	Y+57, r1	; 0x39
    28d8:	30 c1       	rjmp	.+608    	; 0x2b3a <passwordEntering+0x298>
		{
			password[i] = KEYPAD_getPressedKey(); /*store the first password in the first array*/
    28da:	89 ad       	ldd	r24, Y+57	; 0x39
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    28e2:	9b ad       	ldd	r25, Y+59	; 0x3b
    28e4:	8c 01       	movw	r16, r24
    28e6:	02 0f       	add	r16, r18
    28e8:	13 1f       	adc	r17, r19
    28ea:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <KEYPAD_getPressedKey>
    28ee:	f8 01       	movw	r30, r16
    28f0:	80 83       	st	Z, r24
			if(password[i] >= 0 && password[i] <= 9) /*password should be numbers only*/
    28f2:	89 ad       	ldd	r24, Y+57	; 0x39
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	8a ad       	ldd	r24, Y+58	; 0x3a
    28fa:	9b ad       	ldd	r25, Y+59	; 0x3b
    28fc:	fc 01       	movw	r30, r24
    28fe:	e2 0f       	add	r30, r18
    2900:	f3 1f       	adc	r31, r19
    2902:	80 81       	ld	r24, Z
    2904:	8a 30       	cpi	r24, 0x0A	; 10
    2906:	08 f0       	brcs	.+2      	; 0x290a <passwordEntering+0x68>
    2908:	8b c0       	rjmp	.+278    	; 0x2a20 <passwordEntering+0x17e>
			{
				LCD_moveCursor(1,i);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	69 ad       	ldd	r22, Y+57	; 0x39
    290e:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_moveCursor>
				LCD_integerToString(password[i]); /*display the number user entered for 1/2 a sec to be seen then replace it with * as required*/
    2912:	89 ad       	ldd	r24, Y+57	; 0x39
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	8a ad       	ldd	r24, Y+58	; 0x3a
    291a:	9b ad       	ldd	r25, Y+59	; 0x3b
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_integerToString>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	aa ef       	ldi	r26, 0xFA	; 250
    2932:	b3 e4       	ldi	r27, 0x43	; 67
    2934:	8d ab       	std	Y+53, r24	; 0x35
    2936:	9e ab       	std	Y+54, r25	; 0x36
    2938:	af ab       	std	Y+55, r26	; 0x37
    293a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293c:	6d a9       	ldd	r22, Y+53	; 0x35
    293e:	7e a9       	ldd	r23, Y+54	; 0x36
    2940:	8f a9       	ldd	r24, Y+55	; 0x37
    2942:	98 ad       	ldd	r25, Y+56	; 0x38
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	4a ef       	ldi	r20, 0xFA	; 250
    294a:	54 e4       	ldi	r21, 0x44	; 68
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	89 ab       	std	Y+49, r24	; 0x31
    2956:	9a ab       	std	Y+50, r25	; 0x32
    2958:	ab ab       	std	Y+51, r26	; 0x33
    295a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    295c:	69 a9       	ldd	r22, Y+49	; 0x31
    295e:	7a a9       	ldd	r23, Y+50	; 0x32
    2960:	8b a9       	ldd	r24, Y+51	; 0x33
    2962:	9c a9       	ldd	r25, Y+52	; 0x34
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	40 e8       	ldi	r20, 0x80	; 128
    296a:	5f e3       	ldi	r21, 0x3F	; 63
    296c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2970:	88 23       	and	r24, r24
    2972:	2c f4       	brge	.+10     	; 0x297e <passwordEntering+0xdc>
		__ticks = 1;
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	98 ab       	std	Y+48, r25	; 0x30
    297a:	8f a7       	std	Y+47, r24	; 0x2f
    297c:	3f c0       	rjmp	.+126    	; 0x29fc <passwordEntering+0x15a>
	else if (__tmp > 65535)
    297e:	69 a9       	ldd	r22, Y+49	; 0x31
    2980:	7a a9       	ldd	r23, Y+50	; 0x32
    2982:	8b a9       	ldd	r24, Y+51	; 0x33
    2984:	9c a9       	ldd	r25, Y+52	; 0x34
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	4c f5       	brge	.+82     	; 0x29e8 <passwordEntering+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	6d a9       	ldd	r22, Y+53	; 0x35
    2998:	7e a9       	ldd	r23, Y+54	; 0x36
    299a:	8f a9       	ldd	r24, Y+55	; 0x37
    299c:	98 ad       	ldd	r25, Y+56	; 0x38
    299e:	20 e0       	ldi	r18, 0x00	; 0
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e2       	ldi	r20, 0x20	; 32
    29a4:	51 e4       	ldi	r21, 0x41	; 65
    29a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	98 ab       	std	Y+48, r25	; 0x30
    29bc:	8f a7       	std	Y+47, r24	; 0x2f
    29be:	0f c0       	rjmp	.+30     	; 0x29de <passwordEntering+0x13c>
    29c0:	88 ec       	ldi	r24, 0xC8	; 200
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9e a7       	std	Y+46, r25	; 0x2e
    29c6:	8d a7       	std	Y+45, r24	; 0x2d
    29c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    29ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	f1 f7       	brne	.-4      	; 0x29cc <passwordEntering+0x12a>
    29d0:	9e a7       	std	Y+46, r25	; 0x2e
    29d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d6:	98 a9       	ldd	r25, Y+48	; 0x30
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	98 ab       	std	Y+48, r25	; 0x30
    29dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29de:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e0:	98 a9       	ldd	r25, Y+48	; 0x30
    29e2:	00 97       	sbiw	r24, 0x00	; 0
    29e4:	69 f7       	brne	.-38     	; 0x29c0 <passwordEntering+0x11e>
    29e6:	14 c0       	rjmp	.+40     	; 0x2a10 <passwordEntering+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e8:	69 a9       	ldd	r22, Y+49	; 0x31
    29ea:	7a a9       	ldd	r23, Y+50	; 0x32
    29ec:	8b a9       	ldd	r24, Y+51	; 0x33
    29ee:	9c a9       	ldd	r25, Y+52	; 0x34
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	98 ab       	std	Y+48, r25	; 0x30
    29fa:	8f a7       	std	Y+47, r24	; 0x2f
    29fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2a00:	9c a7       	std	Y+44, r25	; 0x2c
    2a02:	8b a7       	std	Y+43, r24	; 0x2b
    2a04:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a06:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <passwordEntering+0x166>
    2a0c:	9c a7       	std	Y+44, r25	; 0x2c
    2a0e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				LCD_moveCursor(1,i);
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	69 ad       	ldd	r22, Y+57	; 0x39
    2a14:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_moveCursor>
				LCD_displayCharacter('*');
    2a18:	8a e2       	ldi	r24, 0x2A	; 42
    2a1a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_displayCharacter>
    2a1e:	18 c0       	rjmp	.+48     	; 0x2a50 <passwordEntering+0x1ae>
			}
			else if(password[i] == 'c')
    2a20:	89 ad       	ldd	r24, Y+57	; 0x39
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	8a ad       	ldd	r24, Y+58	; 0x3a
    2a28:	9b ad       	ldd	r25, Y+59	; 0x3b
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	e2 0f       	add	r30, r18
    2a2e:	f3 1f       	adc	r31, r19
    2a30:	80 81       	ld	r24, Z
    2a32:	83 36       	cpi	r24, 0x63	; 99
    2a34:	51 f4       	brne	.+20     	; 0x2a4a <passwordEntering+0x1a8>
			{
				i = -1;
    2a36:	8f ef       	ldi	r24, 0xFF	; 255
    2a38:	89 af       	std	Y+57, r24	; 0x39
				LCD_displayStringRowColumn(1,0,"     ");  /*if clear button is pressed clear the screen and reset the counter*/
    2a3a:	2b ed       	ldi	r18, 0xDB	; 219
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	a9 01       	movw	r20, r18
    2a44:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
    2a48:	03 c0       	rjmp	.+6      	; 0x2a50 <passwordEntering+0x1ae>
			}
			else
			{
				i--; /*if any character is entered do not consider it from the 5 numbers password*/
    2a4a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a4c:	81 50       	subi	r24, 0x01	; 1
    2a4e:	89 af       	std	Y+57, r24	; 0x39
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a8 e4       	ldi	r26, 0x48	; 72
    2a56:	b2 e4       	ldi	r27, 0x42	; 66
    2a58:	8f a3       	std	Y+39, r24	; 0x27
    2a5a:	98 a7       	std	Y+40, r25	; 0x28
    2a5c:	a9 a7       	std	Y+41, r26	; 0x29
    2a5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	6f a1       	ldd	r22, Y+39	; 0x27
    2a62:	78 a5       	ldd	r23, Y+40	; 0x28
    2a64:	89 a5       	ldd	r24, Y+41	; 0x29
    2a66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a ef       	ldi	r20, 0xFA	; 250
    2a6e:	54 e4       	ldi	r21, 0x44	; 68
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8b a3       	std	Y+35, r24	; 0x23
    2a7a:	9c a3       	std	Y+36, r25	; 0x24
    2a7c:	ad a3       	std	Y+37, r26	; 0x25
    2a7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a80:	6b a1       	ldd	r22, Y+35	; 0x23
    2a82:	7c a1       	ldd	r23, Y+36	; 0x24
    2a84:	8d a1       	ldd	r24, Y+37	; 0x25
    2a86:	9e a1       	ldd	r25, Y+38	; 0x26
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <passwordEntering+0x200>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9a a3       	std	Y+34, r25	; 0x22
    2a9e:	89 a3       	std	Y+33, r24	; 0x21
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <passwordEntering+0x27e>
	else if (__tmp > 65535)
    2aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <passwordEntering+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	6f a1       	ldd	r22, Y+39	; 0x27
    2abc:	78 a5       	ldd	r23, Y+40	; 0x28
    2abe:	89 a5       	ldd	r24, Y+41	; 0x29
    2ac0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9a a3       	std	Y+34, r25	; 0x22
    2ae0:	89 a3       	std	Y+33, r24	; 0x21
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <passwordEntering+0x260>
    2ae4:	88 ec       	ldi	r24, 0xC8	; 200
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	98 a3       	std	Y+32, r25	; 0x20
    2aea:	8f 8f       	std	Y+31, r24	; 0x1f
    2aec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aee:	98 a1       	ldd	r25, Y+32	; 0x20
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <passwordEntering+0x24e>
    2af4:	98 a3       	std	Y+32, r25	; 0x20
    2af6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	89 a1       	ldd	r24, Y+33	; 0x21
    2afa:	9a a1       	ldd	r25, Y+34	; 0x22
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9a a3       	std	Y+34, r25	; 0x22
    2b00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	89 a1       	ldd	r24, Y+33	; 0x21
    2b04:	9a a1       	ldd	r25, Y+34	; 0x22
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <passwordEntering+0x242>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <passwordEntering+0x292>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b10:	8d a1       	ldd	r24, Y+37	; 0x25
    2b12:	9e a1       	ldd	r25, Y+38	; 0x26
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9a a3       	std	Y+34, r25	; 0x22
    2b1e:	89 a3       	std	Y+33, r24	; 0x21
    2b20:	89 a1       	ldd	r24, Y+33	; 0x21
    2b22:	9a a1       	ldd	r25, Y+34	; 0x22
    2b24:	9e 8f       	std	Y+30, r25	; 0x1e
    2b26:	8d 8f       	std	Y+29, r24	; 0x1d
    2b28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <passwordEntering+0x28a>
    2b30:	9e 8f       	std	Y+30, r25	; 0x1e
    2b32:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_clearScreen();

	if(firstOrSecond == MC1_FIRST_PASSWORD)
	{
		LCD_displayString("Plz Enter Pass:");
		for(i = 0; i < 5; i++)
    2b34:	89 ad       	ldd	r24, Y+57	; 0x39
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	89 af       	std	Y+57, r24	; 0x39
    2b3a:	89 ad       	ldd	r24, Y+57	; 0x39
    2b3c:	85 30       	cpi	r24, 0x05	; 5
    2b3e:	08 f4       	brcc	.+2      	; 0x2b42 <passwordEntering+0x2a0>
    2b40:	cc ce       	rjmp	.-616    	; 0x28da <passwordEntering+0x38>
    2b42:	4b c1       	rjmp	.+662    	; 0x2dda <passwordEntering+0x538>
				i--; /*if any character is entered do not consider it from the 5 numbers password*/
			}
			_delay_ms(50); /*small delay before taking the next number */
		}
	}
	else if(firstOrSecond == MC1_SECOND_PASSWORD)
    2b44:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b46:	83 30       	cpi	r24, 0x03	; 3
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <passwordEntering+0x2aa>
    2b4a:	47 c1       	rjmp	.+654    	; 0x2dda <passwordEntering+0x538>
	{
		LCD_displayString("Plz re-enter the ");
    2b4c:	81 ee       	ldi	r24, 0xE1	; 225
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 5d 11 	call	0x22ba	; 0x22ba <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"same pass:"); /*different strings to be displayed on second password entry*/
    2b54:	23 ef       	ldi	r18, 0xF3	; 243
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	a9 01       	movw	r20, r18
    2b5e:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>

		for(i = 0; i < 5; i++)
    2b62:	19 ae       	std	Y+57, r1	; 0x39
    2b64:	36 c1       	rjmp	.+620    	; 0x2dd2 <passwordEntering+0x530>
		{
			password[i] = KEYPAD_getPressedKey(); /*store the second password in the second array*/
    2b66:	89 ad       	ldd	r24, Y+57	; 0x39
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b6e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b70:	8c 01       	movw	r16, r24
    2b72:	02 0f       	add	r16, r18
    2b74:	13 1f       	adc	r17, r19
    2b76:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <KEYPAD_getPressedKey>
    2b7a:	f8 01       	movw	r30, r16
    2b7c:	80 83       	st	Z, r24
			if(password[i] >= 0 && password[i] <= 9)/*password should be numbers only*/
    2b7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2b80:	28 2f       	mov	r18, r24
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	8a ad       	ldd	r24, Y+58	; 0x3a
    2b86:	9b ad       	ldd	r25, Y+59	; 0x3b
    2b88:	fc 01       	movw	r30, r24
    2b8a:	e2 0f       	add	r30, r18
    2b8c:	f3 1f       	adc	r31, r19
    2b8e:	80 81       	ld	r24, Z
    2b90:	8a 30       	cpi	r24, 0x0A	; 10
    2b92:	08 f0       	brcs	.+2      	; 0x2b96 <passwordEntering+0x2f4>
    2b94:	91 c0       	rjmp	.+290    	; 0x2cb8 <passwordEntering+0x416>
			{
				LCD_moveCursor(1,i+11);
    2b96:	89 ad       	ldd	r24, Y+57	; 0x39
    2b98:	98 2f       	mov	r25, r24
    2b9a:	95 5f       	subi	r25, 0xF5	; 245
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	69 2f       	mov	r22, r25
    2ba0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_moveCursor>
				LCD_integerToString(password[i]); /*display the number user entered for 1/2 a sec to be seen then replace it with * as required*/
    2ba4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8a ad       	ldd	r24, Y+58	; 0x3a
    2bac:	9b ad       	ldd	r25, Y+59	; 0x3b
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 2f       	mov	r24, r24
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <LCD_integerToString>
    2bbe:	80 e0       	ldi	r24, 0x00	; 0
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	aa ef       	ldi	r26, 0xFA	; 250
    2bc4:	b3 e4       	ldi	r27, 0x43	; 67
    2bc6:	89 8f       	std	Y+25, r24	; 0x19
    2bc8:	9a 8f       	std	Y+26, r25	; 0x1a
    2bca:	ab 8f       	std	Y+27, r26	; 0x1b
    2bcc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bce:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	4a ef       	ldi	r20, 0xFA	; 250
    2bdc:	54 e4       	ldi	r21, 0x44	; 68
    2bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	8d 8b       	std	Y+21, r24	; 0x15
    2be8:	9e 8b       	std	Y+22, r25	; 0x16
    2bea:	af 8b       	std	Y+23, r26	; 0x17
    2bec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bee:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	40 e8       	ldi	r20, 0x80	; 128
    2bfc:	5f e3       	ldi	r21, 0x3F	; 63
    2bfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c02:	88 23       	and	r24, r24
    2c04:	2c f4       	brge	.+10     	; 0x2c10 <passwordEntering+0x36e>
		__ticks = 1;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
    2c0e:	3f c0       	rjmp	.+126    	; 0x2c8e <passwordEntering+0x3ec>
	else if (__tmp > 65535)
    2c10:	6d 89       	ldd	r22, Y+21	; 0x15
    2c12:	7e 89       	ldd	r23, Y+22	; 0x16
    2c14:	8f 89       	ldd	r24, Y+23	; 0x17
    2c16:	98 8d       	ldd	r25, Y+24	; 0x18
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	3f ef       	ldi	r19, 0xFF	; 255
    2c1c:	4f e7       	ldi	r20, 0x7F	; 127
    2c1e:	57 e4       	ldi	r21, 0x47	; 71
    2c20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c24:	18 16       	cp	r1, r24
    2c26:	4c f5       	brge	.+82     	; 0x2c7a <passwordEntering+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c28:	69 8d       	ldd	r22, Y+25	; 0x19
    2c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e2       	ldi	r20, 0x20	; 32
    2c36:	51 e4       	ldi	r21, 0x41	; 65
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	bc 01       	movw	r22, r24
    2c42:	cd 01       	movw	r24, r26
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	9c 8b       	std	Y+20, r25	; 0x14
    2c4e:	8b 8b       	std	Y+19, r24	; 0x13
    2c50:	0f c0       	rjmp	.+30     	; 0x2c70 <passwordEntering+0x3ce>
    2c52:	88 ec       	ldi	r24, 0xC8	; 200
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9a 8b       	std	Y+18, r25	; 0x12
    2c58:	89 8b       	std	Y+17, r24	; 0x11
    2c5a:	89 89       	ldd	r24, Y+17	; 0x11
    2c5c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	f1 f7       	brne	.-4      	; 0x2c5e <passwordEntering+0x3bc>
    2c62:	9a 8b       	std	Y+18, r25	; 0x12
    2c64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c66:	8b 89       	ldd	r24, Y+19	; 0x13
    2c68:	9c 89       	ldd	r25, Y+20	; 0x14
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	9c 8b       	std	Y+20, r25	; 0x14
    2c6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c70:	8b 89       	ldd	r24, Y+19	; 0x13
    2c72:	9c 89       	ldd	r25, Y+20	; 0x14
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	69 f7       	brne	.-38     	; 0x2c52 <passwordEntering+0x3b0>
    2c78:	14 c0       	rjmp	.+40     	; 0x2ca2 <passwordEntering+0x400>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c80:	98 8d       	ldd	r25, Y+24	; 0x18
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	9c 8b       	std	Y+20, r25	; 0x14
    2c8c:	8b 8b       	std	Y+19, r24	; 0x13
    2c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c90:	9c 89       	ldd	r25, Y+20	; 0x14
    2c92:	98 8b       	std	Y+16, r25	; 0x10
    2c94:	8f 87       	std	Y+15, r24	; 0x0f
    2c96:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c98:	98 89       	ldd	r25, Y+16	; 0x10
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	f1 f7       	brne	.-4      	; 0x2c9a <passwordEntering+0x3f8>
    2c9e:	98 8b       	std	Y+16, r25	; 0x10
    2ca0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				LCD_moveCursor(1,i+11);
    2ca2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ca4:	98 2f       	mov	r25, r24
    2ca6:	95 5f       	subi	r25, 0xF5	; 245
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	69 2f       	mov	r22, r25
    2cac:	0e 94 79 11 	call	0x22f2	; 0x22f2 <LCD_moveCursor>
				LCD_displayCharacter('*');
    2cb0:	8a e2       	ldi	r24, 0x2A	; 42
    2cb2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <LCD_displayCharacter>
    2cb6:	18 c0       	rjmp	.+48     	; 0x2ce8 <passwordEntering+0x446>
			}
			else if(password[i] == 'c')
    2cb8:	89 ad       	ldd	r24, Y+57	; 0x39
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cc0:	9b ad       	ldd	r25, Y+59	; 0x3b
    2cc2:	fc 01       	movw	r30, r24
    2cc4:	e2 0f       	add	r30, r18
    2cc6:	f3 1f       	adc	r31, r19
    2cc8:	80 81       	ld	r24, Z
    2cca:	83 36       	cpi	r24, 0x63	; 99
    2ccc:	51 f4       	brne	.+20     	; 0x2ce2 <passwordEntering+0x440>
			{
				i = -1;
    2cce:	8f ef       	ldi	r24, 0xFF	; 255
    2cd0:	89 af       	std	Y+57, r24	; 0x39
				LCD_displayStringRowColumn(1,11,"     "); /*if clear button is pressed clear the screen and reset the counter*/
    2cd2:	2b ed       	ldi	r18, 0xDB	; 219
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	6b e0       	ldi	r22, 0x0B	; 11
    2cda:	a9 01       	movw	r20, r18
    2cdc:	0e 94 bb 11 	call	0x2376	; 0x2376 <LCD_displayStringRowColumn>
    2ce0:	03 c0       	rjmp	.+6      	; 0x2ce8 <passwordEntering+0x446>
			}
			else
			{
				i--;  /*if any character is entered do not consider it from the 5 numbers password*/
    2ce2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ce4:	81 50       	subi	r24, 0x01	; 1
    2ce6:	89 af       	std	Y+57, r24	; 0x39
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	a8 e4       	ldi	r26, 0x48	; 72
    2cee:	b2 e4       	ldi	r27, 0x42	; 66
    2cf0:	8b 87       	std	Y+11, r24	; 0x0b
    2cf2:	9c 87       	std	Y+12, r25	; 0x0c
    2cf4:	ad 87       	std	Y+13, r26	; 0x0d
    2cf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a ef       	ldi	r20, 0xFA	; 250
    2d06:	54 e4       	ldi	r21, 0x44	; 68
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	8f 83       	std	Y+7, r24	; 0x07
    2d12:	98 87       	std	Y+8, r25	; 0x08
    2d14:	a9 87       	std	Y+9, r26	; 0x09
    2d16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d18:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1a:	78 85       	ldd	r23, Y+8	; 0x08
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d2c:	88 23       	and	r24, r24
    2d2e:	2c f4       	brge	.+10     	; 0x2d3a <passwordEntering+0x498>
		__ticks = 1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	8d 83       	std	Y+5, r24	; 0x05
    2d38:	3f c0       	rjmp	.+126    	; 0x2db8 <passwordEntering+0x516>
	else if (__tmp > 65535)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	4c f5       	brge	.+82     	; 0x2da4 <passwordEntering+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	51 e4       	ldi	r21, 0x41	; 65
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	0f c0       	rjmp	.+30     	; 0x2d9a <passwordEntering+0x4f8>
    2d7c:	88 ec       	ldi	r24, 0xC8	; 200
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	9c 83       	std	Y+4, r25	; 0x04
    2d82:	8b 83       	std	Y+3, r24	; 0x03
    2d84:	8b 81       	ldd	r24, Y+3	; 0x03
    2d86:	9c 81       	ldd	r25, Y+4	; 0x04
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <passwordEntering+0x4e6>
    2d8c:	9c 83       	std	Y+4, r25	; 0x04
    2d8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d90:	8d 81       	ldd	r24, Y+5	; 0x05
    2d92:	9e 81       	ldd	r25, Y+6	; 0x06
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	69 f7       	brne	.-38     	; 0x2d7c <passwordEntering+0x4da>
    2da2:	14 c0       	rjmp	.+40     	; 0x2dcc <passwordEntering+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <passwordEntering+0x522>
    2dc8:	9a 83       	std	Y+2, r25	; 0x02
    2dca:	89 83       	std	Y+1, r24	; 0x01
	else if(firstOrSecond == MC1_SECOND_PASSWORD)
	{
		LCD_displayString("Plz re-enter the ");
		LCD_displayStringRowColumn(1,0,"same pass:"); /*different strings to be displayed on second password entry*/

		for(i = 0; i < 5; i++)
    2dcc:	89 ad       	ldd	r24, Y+57	; 0x39
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	89 af       	std	Y+57, r24	; 0x39
    2dd2:	89 ad       	ldd	r24, Y+57	; 0x39
    2dd4:	85 30       	cpi	r24, 0x05	; 5
    2dd6:	08 f4       	brcc	.+2      	; 0x2dda <passwordEntering+0x538>
    2dd8:	c6 ce       	rjmp	.-628    	; 0x2b66 <passwordEntering+0x2c4>
			_delay_ms(50);  /*small delay before taking the next number */
		}
	}

	/*After the 5 digits of password are saved wait for pressing the = button to leave the function*/
	while(KEYPAD_getPressedKey() != '=');
    2dda:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <KEYPAD_getPressedKey>
    2dde:	8d 33       	cpi	r24, 0x3D	; 61
    2de0:	e1 f7       	brne	.-8      	; 0x2dda <passwordEntering+0x538>
}
    2de2:	ec 96       	adiw	r28, 0x3c	; 60
    2de4:	0f b6       	in	r0, 0x3f	; 63
    2de6:	f8 94       	cli
    2de8:	de bf       	out	0x3e, r29	; 62
    2dea:	0f be       	out	0x3f, r0	; 63
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	cf 91       	pop	r28
    2df0:	df 91       	pop	r29
    2df2:	1f 91       	pop	r17
    2df4:	0f 91       	pop	r16
    2df6:	08 95       	ret

00002df8 <sendPassword>:


/*function to send the password to the control ECU through the UART*/
void sendPassword(uint8* password)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	61 97       	sbiw	r28, 0x11	; 17
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	99 8b       	std	Y+17, r25	; 0x11
    2e0e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i = 0;
    2e10:	1f 86       	std	Y+15, r1	; 0x0f

	for(i = 0; i < PASSWORD_LENGTH; i++)
    2e12:	1f 86       	std	Y+15, r1	; 0x0f
    2e14:	80 c0       	rjmp	.+256    	; 0x2f16 <sendPassword+0x11e>
	{
		UART_sendByte(password[i]); /*send the password byte by byte*/
    2e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	88 89       	ldd	r24, Y+16	; 0x10
    2e1e:	99 89       	ldd	r25, Y+17	; 0x11
    2e20:	fc 01       	movw	r30, r24
    2e22:	e2 0f       	add	r30, r18
    2e24:	f3 1f       	adc	r31, r19
    2e26:	80 81       	ld	r24, Z
    2e28:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <UART_sendByte>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	a0 e7       	ldi	r26, 0x70	; 112
    2e32:	b1 e4       	ldi	r27, 0x41	; 65
    2e34:	8b 87       	std	Y+11, r24	; 0x0b
    2e36:	9c 87       	std	Y+12, r25	; 0x0c
    2e38:	ad 87       	std	Y+13, r26	; 0x0d
    2e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a ef       	ldi	r20, 0xFA	; 250
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8f 83       	std	Y+7, r24	; 0x07
    2e56:	98 87       	std	Y+8, r25	; 0x08
    2e58:	a9 87       	std	Y+9, r26	; 0x09
    2e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5e:	78 85       	ldd	r23, Y+8	; 0x08
    2e60:	89 85       	ldd	r24, Y+9	; 0x09
    2e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <sendPassword+0x86>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9e 83       	std	Y+6, r25	; 0x06
    2e7a:	8d 83       	std	Y+5, r24	; 0x05
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <sendPassword+0x104>
	else if (__tmp > 65535)
    2e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e80:	78 85       	ldd	r23, Y+8	; 0x08
    2e82:	89 85       	ldd	r24, Y+9	; 0x09
    2e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <sendPassword+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e 83       	std	Y+6, r25	; 0x06
    2ebc:	8d 83       	std	Y+5, r24	; 0x05
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <sendPassword+0xe6>
    2ec0:	88 ec       	ldi	r24, 0xC8	; 200
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9c 83       	std	Y+4, r25	; 0x04
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <sendPassword+0xd4>
    2ed0:	9c 83       	std	Y+4, r25	; 0x04
    2ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9e 83       	std	Y+6, r25	; 0x06
    2edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <sendPassword+0xc8>
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <sendPassword+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    2eea:	78 85       	ldd	r23, Y+8	; 0x08
    2eec:	89 85       	ldd	r24, Y+9	; 0x09
    2eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9e 83       	std	Y+6, r25	; 0x06
    2efa:	8d 83       	std	Y+5, r24	; 0x05
    2efc:	8d 81       	ldd	r24, Y+5	; 0x05
    2efe:	9e 81       	ldd	r25, Y+6	; 0x06
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	9a 81       	ldd	r25, Y+2	; 0x02
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <sendPassword+0x110>
    2f0c:	9a 83       	std	Y+2, r25	; 0x02
    2f0e:	89 83       	std	Y+1, r24	; 0x01
/*function to send the password to the control ECU through the UART*/
void sendPassword(uint8* password)
{
	uint8 i = 0;

	for(i = 0; i < PASSWORD_LENGTH; i++)
    2f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f12:	8f 5f       	subi	r24, 0xFF	; 255
    2f14:	8f 87       	std	Y+15, r24	; 0x0f
    2f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f18:	85 30       	cpi	r24, 0x05	; 5
    2f1a:	08 f4       	brcc	.+2      	; 0x2f1e <sendPassword+0x126>
    2f1c:	7c cf       	rjmp	.-264    	; 0x2e16 <sendPassword+0x1e>
	{
		UART_sendByte(password[i]); /*send the password byte by byte*/
		_delay_ms(15); /*small delay to avoid overwrite*/
	}
}
    2f1e:	61 96       	adiw	r28, 0x11	; 17
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <countTimerTicks>:

/*It is the call back function of the timer*/
void countTimerTicks(void)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	timerTicks++; /*increment the timer ticks by 1 upon each interrupt*/
    2f38:	80 91 19 01 	lds	r24, 0x0119
    2f3c:	8f 5f       	subi	r24, 0xFF	; 255
    2f3e:	80 93 19 01 	sts	0x0119, r24
}
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <__udivmodsi4>:
    2f48:	a1 e2       	ldi	r26, 0x21	; 33
    2f4a:	1a 2e       	mov	r1, r26
    2f4c:	aa 1b       	sub	r26, r26
    2f4e:	bb 1b       	sub	r27, r27
    2f50:	fd 01       	movw	r30, r26
    2f52:	0d c0       	rjmp	.+26     	; 0x2f6e <__udivmodsi4_ep>

00002f54 <__udivmodsi4_loop>:
    2f54:	aa 1f       	adc	r26, r26
    2f56:	bb 1f       	adc	r27, r27
    2f58:	ee 1f       	adc	r30, r30
    2f5a:	ff 1f       	adc	r31, r31
    2f5c:	a2 17       	cp	r26, r18
    2f5e:	b3 07       	cpc	r27, r19
    2f60:	e4 07       	cpc	r30, r20
    2f62:	f5 07       	cpc	r31, r21
    2f64:	20 f0       	brcs	.+8      	; 0x2f6e <__udivmodsi4_ep>
    2f66:	a2 1b       	sub	r26, r18
    2f68:	b3 0b       	sbc	r27, r19
    2f6a:	e4 0b       	sbc	r30, r20
    2f6c:	f5 0b       	sbc	r31, r21

00002f6e <__udivmodsi4_ep>:
    2f6e:	66 1f       	adc	r22, r22
    2f70:	77 1f       	adc	r23, r23
    2f72:	88 1f       	adc	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	1a 94       	dec	r1
    2f78:	69 f7       	brne	.-38     	; 0x2f54 <__udivmodsi4_loop>
    2f7a:	60 95       	com	r22
    2f7c:	70 95       	com	r23
    2f7e:	80 95       	com	r24
    2f80:	90 95       	com	r25
    2f82:	9b 01       	movw	r18, r22
    2f84:	ac 01       	movw	r20, r24
    2f86:	bd 01       	movw	r22, r26
    2f88:	cf 01       	movw	r24, r30
    2f8a:	08 95       	ret

00002f8c <__prologue_saves__>:
    2f8c:	2f 92       	push	r2
    2f8e:	3f 92       	push	r3
    2f90:	4f 92       	push	r4
    2f92:	5f 92       	push	r5
    2f94:	6f 92       	push	r6
    2f96:	7f 92       	push	r7
    2f98:	8f 92       	push	r8
    2f9a:	9f 92       	push	r9
    2f9c:	af 92       	push	r10
    2f9e:	bf 92       	push	r11
    2fa0:	cf 92       	push	r12
    2fa2:	df 92       	push	r13
    2fa4:	ef 92       	push	r14
    2fa6:	ff 92       	push	r15
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	cf 93       	push	r28
    2fae:	df 93       	push	r29
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	ca 1b       	sub	r28, r26
    2fb6:	db 0b       	sbc	r29, r27
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	09 94       	ijmp

00002fc4 <__epilogue_restores__>:
    2fc4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fc6:	39 88       	ldd	r3, Y+17	; 0x11
    2fc8:	48 88       	ldd	r4, Y+16	; 0x10
    2fca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fcc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fce:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fd0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fd2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fd6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fd8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fda:	df 80       	ldd	r13, Y+7	; 0x07
    2fdc:	ee 80       	ldd	r14, Y+6	; 0x06
    2fde:	fd 80       	ldd	r15, Y+5	; 0x05
    2fe0:	0c 81       	ldd	r16, Y+4	; 0x04
    2fe2:	1b 81       	ldd	r17, Y+3	; 0x03
    2fe4:	aa 81       	ldd	r26, Y+2	; 0x02
    2fe6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe8:	ce 0f       	add	r28, r30
    2fea:	d1 1d       	adc	r29, r1
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	ed 01       	movw	r28, r26
    2ff8:	08 95       	ret

00002ffa <itoa>:
    2ffa:	fb 01       	movw	r30, r22
    2ffc:	9f 01       	movw	r18, r30
    2ffe:	e8 94       	clt
    3000:	42 30       	cpi	r20, 0x02	; 2
    3002:	c4 f0       	brlt	.+48     	; 0x3034 <itoa+0x3a>
    3004:	45 32       	cpi	r20, 0x25	; 37
    3006:	b4 f4       	brge	.+44     	; 0x3034 <itoa+0x3a>
    3008:	4a 30       	cpi	r20, 0x0A	; 10
    300a:	29 f4       	brne	.+10     	; 0x3016 <itoa+0x1c>
    300c:	97 fb       	bst	r25, 7
    300e:	1e f4       	brtc	.+6      	; 0x3016 <itoa+0x1c>
    3010:	90 95       	com	r25
    3012:	81 95       	neg	r24
    3014:	9f 4f       	sbci	r25, 0xFF	; 255
    3016:	64 2f       	mov	r22, r20
    3018:	77 27       	eor	r23, r23
    301a:	0e 94 2e 18 	call	0x305c	; 0x305c <__udivmodhi4>
    301e:	80 5d       	subi	r24, 0xD0	; 208
    3020:	8a 33       	cpi	r24, 0x3A	; 58
    3022:	0c f0       	brlt	.+2      	; 0x3026 <itoa+0x2c>
    3024:	89 5d       	subi	r24, 0xD9	; 217
    3026:	81 93       	st	Z+, r24
    3028:	cb 01       	movw	r24, r22
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	a1 f7       	brne	.-24     	; 0x3016 <itoa+0x1c>
    302e:	16 f4       	brtc	.+4      	; 0x3034 <itoa+0x3a>
    3030:	5d e2       	ldi	r21, 0x2D	; 45
    3032:	51 93       	st	Z+, r21
    3034:	10 82       	st	Z, r1
    3036:	c9 01       	movw	r24, r18
    3038:	0c 94 1e 18 	jmp	0x303c	; 0x303c <strrev>

0000303c <strrev>:
    303c:	dc 01       	movw	r26, r24
    303e:	fc 01       	movw	r30, r24
    3040:	67 2f       	mov	r22, r23
    3042:	71 91       	ld	r23, Z+
    3044:	77 23       	and	r23, r23
    3046:	e1 f7       	brne	.-8      	; 0x3040 <strrev+0x4>
    3048:	32 97       	sbiw	r30, 0x02	; 2
    304a:	04 c0       	rjmp	.+8      	; 0x3054 <strrev+0x18>
    304c:	7c 91       	ld	r23, X
    304e:	6d 93       	st	X+, r22
    3050:	70 83       	st	Z, r23
    3052:	62 91       	ld	r22, -Z
    3054:	ae 17       	cp	r26, r30
    3056:	bf 07       	cpc	r27, r31
    3058:	c8 f3       	brcs	.-14     	; 0x304c <strrev+0x10>
    305a:	08 95       	ret

0000305c <__udivmodhi4>:
    305c:	aa 1b       	sub	r26, r26
    305e:	bb 1b       	sub	r27, r27
    3060:	51 e1       	ldi	r21, 0x11	; 17
    3062:	07 c0       	rjmp	.+14     	; 0x3072 <__udivmodhi4_ep>

00003064 <__udivmodhi4_loop>:
    3064:	aa 1f       	adc	r26, r26
    3066:	bb 1f       	adc	r27, r27
    3068:	a6 17       	cp	r26, r22
    306a:	b7 07       	cpc	r27, r23
    306c:	10 f0       	brcs	.+4      	; 0x3072 <__udivmodhi4_ep>
    306e:	a6 1b       	sub	r26, r22
    3070:	b7 0b       	sbc	r27, r23

00003072 <__udivmodhi4_ep>:
    3072:	88 1f       	adc	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	5a 95       	dec	r21
    3078:	a9 f7       	brne	.-22     	; 0x3064 <__udivmodhi4_loop>
    307a:	80 95       	com	r24
    307c:	90 95       	com	r25
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	08 95       	ret

00003084 <_exit>:
    3084:	f8 94       	cli

00003086 <__stop_program>:
    3086:	ff cf       	rjmp	.-2      	; 0x3086 <__stop_program>
